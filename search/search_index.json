{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#Mkdocs-Note","title":"Mkdocs Note","text":"<p>MkDocs Note is a plugin for MkDocs that automatically manages documentations in your mkdocs-based sites. It's designed to create a unified note-taking and documentation experience.</p>"},{"location":"#Recent-New-or-Modified-Documentations","title":"Recent New or Modified Documentations","text":"<ul> <li>Configuration Options2025-10-30 21:19:53</li> <li>Changelog2025-10-30 21:19:53</li> <li>Network Graph Visualization2025-10-19 20:40:36</li> <li>Architecture Overview (v2.0.0+)2025-10-19 20:40:36</li> <li>Credits2025-10-19 20:40:36</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#Installation","title":"Installation","text":"<p>Recommended to use uv to add the plugin to your virtual environment: <pre><code>uv add mkdocs-note\n</code></pre></p> <p>Or use The <code>uv tool</code> Interface (<code>uvx</code>) to install and use it much simpler: <pre><code>uvx mkdocs-note --version\n</code></pre></p> <p>Or just using <code>pip</code>: <pre><code>pip install mkdocs-note\n</code></pre></p> <p>For more details, please refer to the Installation | User Guide.</p>"},{"location":"getting-started/#Configuration","title":"Configuration","text":""},{"location":"getting-started/#Basic-Configuration","title":"Basic Configuration","text":"<p>For basic configuration, you can add the following to your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - mkdocs-note\n</code></pre> <p>It's the simplest configuration, and the plugin will use the default configuration.</p>"},{"location":"getting-started/#Recommended-Configuration","title":"Recommended Configuration","text":"<p>For recommended configuration, you can add the following to your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - mkdocs-note:\n      notes_dir: \"docs/notes\"\n      index_file: \"docs/index.md\"\n      start_marker: \"&lt;!-- recent_notes_start --&gt;\"\n      end_marker: \"&lt;!-- recent_notes_end --&gt;\"\n      max_notes: 10\n      supported_extensions: [\".md\"]\n</code></pre> <p>In general, Mkdocs Note supports highly customizable configuration, you can configure the plugin to your own needs.</p> <p>Please refer to the Configuration Options | User Guide for more details about the information of each configuration options.</p>"},{"location":"getting-started/#Create-Your-Note-Boxes","title":"Create Your Note Boxes","text":""},{"location":"getting-started/#Manual-Setup","title":"Manual Setup","text":"<ol> <li> <p>Create the notes directory you have just configured above in your mkdocs project (e.g., <code>docs/notes</code>)</p> </li> <li> <p>Create an <code>index.md</code> file in your notes directory manually.</p> </li> <li> <p>Add the marker comments to your index file:</p> </li> </ol> <pre><code># My Notes\n\n&lt;!-- recent_notes_start --&gt;\n&lt;!-- recent_notes_end --&gt;\n</code></pre> <p>For index files (<code>index.md</code>), the default configuration will not allow CLI tools to create it automatically, so you need to create it manually. See more details in Exclusion and Something You Should Notice | Recent Notes Insertion about it.</p>"},{"location":"getting-started/#Use-CLI-Commands","title":"Use CLI Commands","text":"<p>The plugin provides several CLI commands for docs and their assets management.</p> <p>And first of all, this is a mkdocs-based plugin, so you need to have a mkdocs project first.</p>"},{"location":"getting-started/#Validate-Structure","title":"Validate Structure","text":"<p>Use following command to validate the structure of your docs and assets:</p> <pre><code>mkdocs-note validate [--path PATH]\n</code></pre> <p>This command will check if the structure of your docs and assets is compliant with the plugin's design.</p> <p>If there are any issues, it will report them to you.</p>"},{"location":"getting-started/#Initialize-Docs-and-Assets-Structure","title":"Initialize Docs and Assets Structure","text":"<p>Use following command to initialize your mkdocs-based docs and assets structure:</p> <pre><code>mkdocs-note init [--path PATH]\n</code></pre> <p>If your docs already has a structure, this command will analyze the existing asset structures and fix the non-compliant asset trees.</p> <p>However, it will not help you move your existing assets to the new structure.</p> <p>For example, if you have a note in <code>docs/notes/my-note.md</code>, and the asset is in <code>docs/assets/notes/my-note/</code>, this command will not help you move the asset to <code>docs/assets/my-note/</code>.</p> <p>And take a look at the entire plugin in <code>v2.0.0</code>,there has no way to move the asset to the new structure automatically, so you need to do it manually and we're now trying to add this optional feature in the future.</p> <p>By the way, if you're really don't want to move your existing assets to the new structure, you can puts them out of the config option <code>notes_dir</code> and use legency way to link them in order to avoid the plugin automatically managing them and cause some undefined events.</p>"},{"location":"getting-started/#Create-New-Documentation","title":"Create New Documentation","text":"<p>Use following command to create a new documentation:</p> <pre><code>mkdocs-note new FILE_PATH\n</code></pre> <p>This command will create a new note file with the default template and the corresponding asset directory, which is a bit like <code>hexo new</code> command in Hexo.</p>"},{"location":"getting-started/#Remove-Existing-Documentation","title":"Remove Existing Documentation","text":"<p>Use following command to remove an existing documentation:</p> <pre><code>mkdocs-note remove FILE_PATH\n</code></pre> <p>This command will remove the documentation file and its corresponding asset directory, and before doing that, it will ask you for confirmation.</p> <p>And you can use the alias <code>mkdocs-note rm</code> to do the same thing.</p>"},{"location":"getting-started/#Other-Commands","title":"Other Commands","text":"<p>There are some other commands that are not mentioned here, you can use <code>mkdocs-note --help/-h</code> or <code>mkdocs-note &lt;command&gt; --help/-h</code> to get the full list of commands and their usage.</p>"},{"location":"getting-started/#Configuration-Auto-Loading","title":"Configuration Auto-Loading","text":"<p>All CLI commands automatically load your custom configuration from <code>mkdocs.yml</code> in the current or parent directories. You can also specify a config file explicitly using <code>--config</code> or <code>-c</code> option:</p> <pre><code>mkdocs-note --config path/to/mkdocs.yml &lt;command&gt;\n</code></pre>"},{"location":"getting-started/#Getting-Help","title":"Getting Help","text":"<p>See the User Guide for more details about the usage and features of the plugin.</p> <p>This project is still in its infancy stage, so any feedback or suggestions are welcome.</p> <p>You can open an issue on GitHub to report bugs or request features.</p> <p>Or you can email me directly at virtualguard101@gmail.com, though I may respone late because of my busy schedule.</p> <p>Thank you for using MkDocs Note!</p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog/#215---2025-10-30","title":"2.1.5 - 2025-10-30","text":""},{"location":"about/changelog/#Fixed","title":"Fixed","text":"<ul> <li> <p>[CRITICAL] Git Timestamp Inconsistency in Remote Deployments: Fixed critical bug where timestamps were identical for all notes except the most recent one when deployed via Vercel or other CI/CD platforms (#TBD)</p> </li> <li> <p>Root Cause: The <code>project_root</code> configuration was using <code>Path(__file__).parent.parent</code>, which pointed to the plugin installation directory (e.g., <code>site-packages/mkdocs_note/</code>) instead of the user's project root. This caused git commands to execute in the wrong directory, failing to retrieve correct commit timestamps.</p> </li> <li> <p>Why It Worked Locally But Failed in Deployment:</p> <ul> <li>Local Development: When using <code>uv run</code> or development mode, <code>__file__</code> might point to the source code directory, which could work by coincidence</li> <li>Remote Deployment: The plugin is installed via pip into <code>site-packages</code>, making <code>project_root</code> point to the wrong location, causing all git operations to fail</li> </ul> </li> <li> <p>Solutions Implemented:</p> <ul> <li> <p>Critical Fix in <code>plugin.py</code>: Modified <code>on_config()</code> to dynamically set <code>project_root</code> from MkDocs config file location instead of plugin installation path:   <pre><code>actual_project_root = Path(config.config_file_path).parent\nself.config.project_root = actual_project_root\n</code></pre></p> </li> <li> <p>Vercel Build Script: Updated <code>scripts/vercel-build.sh</code> to fetch full git history with <code>git fetch --unshallow</code> (additional safety measure)</p> </li> <li> <p>GitHub Actions: Updated <code>.github/workflows/ghpg.yml</code> to include <code>fetch-depth: 0</code> in checkout step (additional safety measure)</p> </li> <li> <p>Enhanced Git Logic: Improved <code>_get_git_commit_time()</code> method with:</p> </li> <li>Shallow clone detection via <code>.git/shallow</code> file check</li> <li>Debug warnings when shallow clone is detected</li> <li>Timestamp validation to prevent future/invalid timestamps</li> <li> <p>Better error handling and fallback to file system timestamps</p> </li> <li> <p>Documentation: Added comprehensive CI/CD deployment guide in <code>docs/usage/config.md</code> with examples for Vercel, GitHub Actions, and GitLab CI</p> </li> </ul> </li> <li> <p>Impact: This fix ensures git timestamps work correctly in all deployment scenarios. The plugin now correctly identifies the user's project directory regardless of how it's installed.</p> </li> </ul>"},{"location":"about/changelog/#Enhanced","title":"Enhanced","text":"<ul> <li>Dynamic Project Root Detection: Plugin now automatically detects project root from MkDocs configuration instead of relying on plugin installation path</li> <li>Shallow Clone Detection: Added <code>_is_shallow_clone()</code> helper method to detect when git repository is shallowly cloned</li> <li>Git Timestamp Validation: Added validation to ensure git timestamps are reasonable and not in the future</li> <li>Deployment Documentation: Added detailed CI/CD configuration examples for major platforms (Vercel, GitHub Actions, GitLab CI)</li> <li>Error Handling: Improved error handling for project root detection with proper fallbacks</li> </ul>"},{"location":"about/changelog/#214---2025-10-28","title":"2.1.4 - 2025-10-28","text":""},{"location":"about/changelog/#Added","title":"Added","text":"<ul> <li>Added <code>enable_asset_fallback</code> configuration option to control asset path fallback behavior</li> <li>Implemented asset path fallback mechanism: when processed asset files don't exist, the plugin now preserves original asset paths instead of replacing them with broken links</li> </ul>"},{"location":"about/changelog/#Enhanced_1","title":"Enhanced","text":"<ul> <li>Improved asset processing robustness by adding existence checks for processed asset files</li> <li>Enhanced logging to provide better feedback when asset fallback occurs</li> </ul>"},{"location":"about/changelog/#213---2025-10-19","title":"2.1.3 - 2025-10-19","text":""},{"location":"about/changelog/#Fixed_1","title":"Fixed","text":"<ul> <li>Fixed smoke test script in order to public package to PyPI properly.</li> </ul>"},{"location":"about/changelog/#212---2025-10-19","title":"2.1.2 - 2025-10-19","text":""},{"location":"about/changelog/#Fixed_2","title":"Fixed","text":"<ul> <li>Use direct file system path for static files to fix the issue where the network graph static assets were not copied to the site directory.</li> </ul>"},{"location":"about/changelog/#Added_1","title":"Added","text":"<ul> <li>Added <code>MANIFEST.in</code> file to include the network graph static assets in the package.</li> </ul>"},{"location":"about/changelog/#211---2025-10-19","title":"2.1.1 - 2025-10-19","text":""},{"location":"about/changelog/#Fixed_3","title":"Fixed","text":"<ul> <li>Fixed the issue where the network graph static assets were not copied to the site directory by using the <code>os.path.join</code> instead of the <code>Path</code> class.</li> </ul>"},{"location":"about/changelog/#210---2025-10-19-Network-Graph-Feature","title":"2.1.0 - 2025-10-19 (Network Graph Feature)","text":""},{"location":"about/changelog/#Added_2","title":"Added","text":"<ul> <li>Network Graph Visualization: Interactive network graph showing relationships between notes (#20)</li> <li>Automatic link detection based on markdown links and wiki-style links</li> <li>D3.js-powered interactive visualization with drag, zoom, and pan</li> <li>Integration with Material for MkDocs theme</li> <li>Graph data export in JSON format</li> <li>Configurable node naming strategy (title or filename)</li> <li>Debug logging for graph generation process</li> </ul>"},{"location":"about/changelog/#Technical-Details","title":"Technical Details","text":"<ul> <li>New Module: <code>utils/graphps/</code> for graph processing functionality</li> <li><code>graph.py</code>: Graph data structure and link detection</li> <li><code>handlers.py</code>: Graph handler for plugin integration</li> <li>Static Assets: Added <code>graph.js</code> and <code>graph.css</code> for frontend visualization</li> <li>Configuration: Added <code>enable_network_graph</code> and <code>graph_config</code> options</li> <li>Build Integration: Automatic graph generation during MkDocs build process</li> </ul>"},{"location":"about/changelog/#200---2025-10-17-Structure-Breaking-Changes","title":"2.0.0 - 2025-10-17 (Structure-Breaking Changes)","text":""},{"location":"about/changelog/#Changed","title":"Changed","text":"<ul> <li> <p>[BREAKING] Modular Architecture Refactoring: Reorganized project structure from monolithic <code>core/</code> to modular <code>utils/</code> packages (#15)</p> </li> <li> <p>Restructured modules by functional domains:</p> <ul> <li> <p><code>utils/assetps/</code>: Asset processing and management</p> </li> <li> <p><code>utils/dataps/</code>: Data models and metadata management (includes frontmatter subsystem)</p> </li> <li> <p><code>utils/docsps/</code>: Document operations (create, move, remove, clean, process)</p> </li> <li> <p><code>utils/fileps/</code>: File I/O and scanning</p> </li> <li> <p><code>utils/pathps/</code>: Path processing utilities (reserved for future)</p> </li> </ul> </li> <li> <p>Introduced <code>ps</code> (Processors) naming convention for consistent module organization</p> </li> <li> <p>Migration details:</p> <ul> <li> <p><code>core/data_models.py</code> \u2192 <code>utils/dataps/meta.py</code></p> </li> <li> <p><code>core/frontmatter_manager.py</code> \u2192 <code>utils/dataps/frontmatter/handlers.py</code></p> </li> <li> <p><code>core/file_manager.py</code> \u2192 <code>utils/fileps/handlers.py</code></p> </li> <li> <p><code>core/assets_manager.py</code> \u2192 <code>utils/assetps/handlers.py</code></p> </li> <li> <p><code>core/note_manager.py</code> \u2192 <code>utils/docsps/handlers.py</code></p> </li> <li> <p><code>core/note_creator.py</code> \u2192 <code>utils/docsps/creator.py</code></p> </li> <li> <p><code>core/note_cleaner.py</code> \u2192 <code>utils/docsps/cleaner.py</code></p> </li> <li> <p><code>core/note_initializer.py</code> \u2192 <code>utils/docsps/initializer.py</code></p> </li> <li> <p><code>core/note_remover.py</code> \u2192 <code>utils/docsps/remover.py</code></p> </li> <li> <p><code>core/notes_mover.py</code> \u2192 <code>utils/docsps/mover.py</code></p> </li> </ul> </li> <li> <p>Updated all import paths throughout codebase (15+ files)</p> </li> <li> <p>Updated all test files and mock paths</p> </li> <li> <p>Benefits:</p> <ul> <li> <p>\u2705 Clear Separation of Concerns: Each package focuses on single responsibility</p> </li> <li> <p>\u2705 Better Extensibility: Easy to add new features without modifying core</p> </li> <li> <p>\u2705 Improved Maintainability: Easier to locate and understand code</p> </li> <li> <p>\u2705 Better Testing: More focused unit tests per module</p> </li> </ul> </li> <li> <p>Test Suite Optimization: Streamlined test suite for better focus</p> </li> <li> <p>Removed 6 non-essential logger tests (testing framework behavior)</p> </li> <li> <p>Test count: 240 \u2192 227 tests</p> </li> <li> <p>Maintained 100% pass rate</p> </li> <li> <p>Code coverage: 71% overall</p> </li> <li> <p>Asset Directory Structure: Simplified asset directory organization from centralized to co-located structure</p> </li> <li> <p>Assets are now placed next to their corresponding notes instead of in a centralized location</p> </li> <li> <p>New pattern: <code>note_file.parent / \"assets\" / note_file.stem</code></p> </li> <li> <p>Examples:</p> <ul> <li> <p>Note: <code>docs/usage/contributing.md</code> \u2192 Assets: <code>docs/usage/assets/contributing/</code></p> </li> <li> <p>Note: <code>docs/notes/python/intro.md</code> \u2192 Assets: <code>docs/notes/python/assets/intro/</code></p> </li> </ul> </li> <li> <p>Benefits:</p> <ul> <li> <p>\u2705 Co-located: Assets are right next to their notes for easier management</p> </li> <li> <p>\u2705 Portable: Moving notes with their assets is straightforward</p> </li> <li> <p>\u2705 Consistent: No path mismatches when notes are outside <code>notes_dir</code></p> </li> <li> <p>\u2705 Simpler: No dependency on <code>notes_dir</code> or <code>assets_dir</code> configuration</p> </li> </ul> </li> <li> <p>Breaking Change: Existing assets in centralized structure need migration</p> </li> <li> <p>Updated components:</p> <ul> <li> <p><code>NoteCreator._get_asset_directory()</code>: Simplified logic</p> </li> <li> <p><code>NoteRemover._get_asset_directory()</code>: Co-located pattern</p> </li> <li> <p><code>NoteMover._get_asset_directory()</code>: Co-located pattern</p> </li> <li> <p><code>NoteCleaner.find_orphaned_assets()</code>: Searches all <code>assets/</code> subdirectories</p> </li> <li> <p><code>NoteInitializer._analyze_asset_tree()</code>: Validates co-located structure</p> </li> </ul> </li> <li> <p>Configuration Deprecation: <code>assets_dir</code> configuration option is now deprecated</p> </li> <li> <p>The option is kept for backward compatibility but no longer used</p> </li> <li> <p>Assets are automatically placed using the co-located pattern</p> </li> </ul>"},{"location":"about/changelog/#Security","title":"Security","text":"<ul> <li> <p>Inconsistency with exclude_patterns in Note Operations (#40): Fixed bug where plugin commands could create or move notes to excluded filenames, causing asset management conflicts</p> </li> <li> <p>Root Cause: <code>NoteCreator</code> and <code>NoteMover</code> didn't check <code>exclude_patterns</code> configuration, allowing operations on <code>index.md</code> and <code>README.md</code> files that would later be ignored by <code>NoteScanner</code>, causing their asset directories to be incorrectly identified as orphaned by <code>NoteCleaner</code></p> </li> <li> <p>Solution: Added <code>exclude_patterns</code> validation across multiple components to enforce consistent behavior</p> </li> <li> <p>Changes:</p> <ul> <li> <p>NoteCreator: Added validation in <code>create_new_note()</code> and <code>validate_note_creation()</code> to reject creation of excluded files</p> </li> <li> <p>NoteMover: Added validation in <code>move_note()</code> to prevent moving/renaming to excluded filenames</p> </li> <li> <p>CLI: Added validation in <code>move_note</code> command (mv/move) to check destination filenames</p> </li> <li> <p>Config Documentation: Improved <code>exclude_patterns</code> docstring to clarify comprehensive scope of exclusion</p> </li> <li> <p>Tests: Added 6 new test cases (4 for creator, 2 for mover) to verify exclusion behavior</p> </li> </ul> </li> <li> <p>Impact: Ensures consistent behavior across all plugin components - files excluded from management cannot be created, moved, or renamed through plugin commands</p> </li> <li> <p>User Experience: Clear error messages guide users when attempting operations with excluded files, suggesting either using different filenames or updating configuration</p> </li> <li> <p>CLI Error Message Clarity: Improved contextual hints in <code>mkdocs-note new</code> command</p> </li> <li> <p>Issue: The hint \"Try running 'mkdocs-note init' first\" was displayed for all validation errors, even when irrelevant (e.g., excluded filenames, file exists, unsupported extensions)</p> </li> <li> <p>Solution: Made hints contextual - now only shows init suggestion when actually relevant (structure non-compliance, missing parent directory)</p> </li> <li> <p>Impact: Users receive more relevant guidance based on the specific error they encounter</p> </li> </ul>"},{"location":"about/changelog/#Fixed_4","title":"Fixed","text":"<ul> <li> <p>Template File Degradation (#39): Fixed critical bug where template file was corrupted by tests</p> </li> <li> <p>Root Cause: Test <code>test_note_initializer.py::test_ensure_template_file_exists</code> was writing to real project template file (<code>overrides/templates/default.md</code>) instead of using temporary files</p> </li> <li> <p>Impact: Production template was degraded from proper frontmatter template to single-line comment: <code># Template content</code></p> </li> <li> <p>Solution:</p> <ul> <li> <p>Restored template file with correct frontmatter structure</p> </li> <li> <p>Updated test to use temporary paths with proper cleanup via try-finally</p> </li> <li> <p>Modified <code>NoteInitializer._ensure_template_file()</code> to create complete default template instead of empty file</p> </li> </ul> </li> <li> <p>Template Content: Ensures new templates include proper frontmatter:</p> <pre><code>---\ndate: {{date}}\ntitle: {{title}}\npermalink: \npublish: true\n---\n\n# {{title}}\n\nStart writing your note content...\n</code></pre> </li> <li> <p>Prevention: Established test isolation best practice - always use temporary files/directories in tests</p> </li> <li> <p>Test Configuration: Corrected test assertions to match actual configuration defaults</p> </li> <li> <p><code>notes_template</code>: Updated assertion from <code>'docs/templates/default.md'</code> to <code>'overrides/templates/default.md'</code></p> </li> <li> <p><code>notes_dir</code>: Updated assertions from <code>'docs/notes'</code> to <code>'docs'</code> (actual default)</p> </li> </ul>"},{"location":"about/changelog/#Added_3","title":"Added","text":"<ul> <li> <p>Frontmatter Metadata System (#15): Implemented comprehensive frontmatter management system for notes</p> </li> <li> <p>Added <code>NoteFrontmatter</code> data class to <code>data_models.py</code> for storing note metadata</p> </li> <li> <p>Created <code>frontmatter_manager.py</code> module with extensible metadata registration system:</p> <ul> <li> <p><code>MetadataRegistry</code>: Central registry for managing metadata fields</p> </li> <li> <p><code>MetadataField</code>: Definition class for metadata fields with type validation</p> </li> <li> <p><code>FrontmatterParser</code>: YAML frontmatter parser for markdown files</p> </li> <li> <p><code>FrontmatterManager</code>: High-level facade for frontmatter operations</p> </li> </ul> </li> <li> <p>Standard metadata fields: <code>date</code>, <code>permalink</code>, <code>publish</code></p> </li> <li> <p>Support for custom metadata fields through registration interface</p> </li> <li> <p>Metadata validation system with type checking and custom validators</p> </li> <li> <p>Template System Enhancement: Improved note template framework</p> </li> <li> <p>Template variables now only substitute in frontmatter section, keeping note body clean</p> </li> <li> <p>Support for both new frontmatter-style templates and legacy templates</p> </li> <li> <p>Automatic detection and handling of template types</p> </li> <li> <p>Updated default template with frontmatter structure</p> </li> <li> <p>Metadata Integration:</p> </li> <li> <p><code>NoteProcessor</code> now extracts frontmatter from markdown notes</p> </li> <li> <p><code>NoteInfo</code> dataclass extended with optional <code>frontmatter</code> field</p> </li> <li> <p><code>NoteCreator</code> generates notes with proper frontmatter structure</p> </li> </ul>"},{"location":"about/changelog/#Changed_1","title":"Changed","text":"<ul> <li> <p>Dependencies: Added <code>pyyaml&gt;=6.0</code> for YAML frontmatter parsing</p> </li> <li> <p>Default Template: Updated to include frontmatter with standard fields</p> </li> <li> <p>Project Configuration: Added <code>build-system</code> to <code>pyproject.toml</code> for proper package installation</p> </li> </ul>"},{"location":"about/changelog/#Technical-Details_1","title":"Technical Details","text":"<ul> <li> <p>Extensibility: Metadata system uses registration pattern for easy extension without modifying core code</p> </li> <li> <p>Backward Compatibility: Existing notes without frontmatter continue to work normally</p> </li> <li> <p>Type Safety: Comprehensive type hints throughout frontmatter system</p> </li> <li> <p>Testing: Added 31 unit tests for frontmatter management system (all passing)</p> </li> </ul>"},{"location":"about/changelog/#Documentation","title":"Documentation","text":"<ul> <li> <p>Architecture Documentation: Created comprehensive new <code>docs/architecture.md</code> for v2.0.0+</p> </li> <li> <p>Documents modular architecture with detailed diagrams</p> </li> <li> <p>Explains design decisions and rationale for refactoring</p> </li> <li> <p>Includes migration guide from v1.x structure</p> </li> <li> <p>Provides developer guidelines and extensibility examples</p> </li> <li> <p>Covers all new modules: assetps, dataps, docsps, fileps, pathps</p> </li> <li> <p>Legacy Documentation: Preserved <code>docs/architecture-old.md</code> for v1.x reference</p> </li> <li> <p>Enhanced code documentation with detailed docstrings</p> </li> <li> <p>Added inline examples for metadata registration usage</p> </li> </ul>"},{"location":"about/changelog/#Testing","title":"Testing","text":"<ul> <li> <p>Test Results: All 227 tests passing (100% success rate)</p> </li> <li> <p>Migrated all test imports to new module paths</p> </li> <li> <p>Updated all mock paths in test decorators</p> </li> <li> <p>Fixed test file pollution issues</p> </li> <li> <p>Test breakdown:</p> <ul> <li> <p>Asset management: 29 tests \u2705</p> </li> <li> <p>File management: 18 tests \u2705</p> </li> <li> <p>Frontmatter system: 31 tests \u2705</p> </li> <li> <p>Note cleaner: 16 tests \u2705</p> </li> <li> <p>Note creator: 19 tests \u2705</p> </li> <li> <p>Note initializer: 13 tests \u2705</p> </li> <li> <p>Note manager: 34 tests \u2705</p> </li> <li> <p>Note remover: 6 tests \u2705</p> </li> <li> <p>Configuration: 23 tests \u2705</p> </li> <li> <p>Plugin: 29 tests \u2705</p> </li> <li> <p>Smoke tests: 4 tests \u2705</p> </li> <li> <p>Help: 5 tests \u2705</p> </li> </ul> </li> <li> <p>Code Coverage: 71% overall coverage maintained</p> </li> </ul>"},{"location":"about/changelog/#125---2025-10-13","title":"1.2.5 - 2025-10-13","text":""},{"location":"about/changelog/#Fixed_5","title":"Fixed","text":"<ul> <li>Fix some dependencies issues in <code>pyproject.toml</code></li> </ul>"},{"location":"about/changelog/#Changed_2","title":"Changed","text":"<ul> <li>Remove <code>setup.py</code> and <code>requirements.txt</code>, use <code>pyproject.toml</code> instead.</li> </ul>"},{"location":"about/changelog/#124---2025-10-13","title":"1.2.4 - 2025-10-13","text":""},{"location":"about/changelog/#Fixed_6","title":"Fixed","text":"<ul> <li>Dependencies: Added <code>mkdocs-material&gt;=9.6.4</code> to <code>pyproject.toml</code> and <code>setup.py</code></li> </ul>"},{"location":"about/changelog/#123---2025-10-13","title":"1.2.3 - 2025-10-13","text":""},{"location":"about/changelog/#Fixed_7","title":"Fixed","text":"<ul> <li>Dependencies: Added <code>mkdocs-material&gt;=9.6.14</code>, <code>mkdocs-jupyter&gt;=0.25.1</code>, <code>mkdocs-minify-plugin&gt;=0.8.0</code>, <code>mkdocs-git-revision-date-localized-plugin&gt;=1.4.0</code> to <code>pyproject.toml</code> and <code>setup.py</code></li> </ul>"},{"location":"about/changelog/#122---2025-10-13","title":"1.2.2 - 2025-10-13","text":""},{"location":"about/changelog/#Fixed_8","title":"Fixed","text":"<ul> <li>Dependencies: Added <code>pyyaml&gt;=6.0</code> and <code>pymdown-extensions&gt;=10.15</code> to <code>pyproject.toml</code> and <code>setup.py</code></li> </ul>"},{"location":"about/changelog/#121---2025-10-13","title":"1.2.1 - 2025-10-13","text":""},{"location":"about/changelog/#Fixed_9","title":"Fixed","text":"<ul> <li> <p>CLI Configuration Loading: Fixed CLI tools not respecting user's custom configuration from <code>mkdocs.yml</code> (#23)</p> </li> <li> <p>Previously, CLI commands (<code>validate</code>, <code>init</code>, <code>new</code>, etc.) always used default configuration values, ignoring user's custom settings in <code>mkdocs.yml</code></p> </li> <li> <p>This caused commands to operate on wrong directories (e.g., validating <code>docs/notes</code> when user configured <code>docs/usage</code>)</p> </li> <li> <p>Implemented <code>load_config_from_mkdocs_yml()</code> function to parse and load plugin configuration from <code>mkdocs.yml</code></p> </li> <li> <p>Added automatic <code>mkdocs.yml</code> file discovery in current and parent directories</p> </li> <li> <p>CLI now correctly applies user's custom configuration for all commands</p> </li> <li> <p>Added comprehensive unit tests for configuration loading functionality</p> </li> </ul>"},{"location":"about/changelog/#120---2025-10-11","title":"1.2.0 - 2025-10-11","text":""},{"location":"about/changelog/#Added_4","title":"Added","text":"<ul> <li> <p>CLI Note Removal: Added <code>mkdocs-note remove</code> (alias: <code>rm</code>) command for deleting notes and their asset directories (#19)</p> </li> <li> <p>Removes note file and its corresponding asset directory</p> </li> <li> <p>Option <code>--keep-assets</code> to preserve asset directory while removing note</p> </li> <li> <p>Option <code>--yes</code> / <code>-y</code> to skip confirmation prompt</p> </li> <li> <p>Automatically cleans up empty parent directories after removal</p> </li> <li> <p>Validates file extension before removal</p> </li> <li> <p>CLI Orphaned Assets Cleanup: Added <code>mkdocs-note clean</code> command for cleaning up orphaned asset directories (#19)</p> </li> <li> <p>Scans notes directory and assets directory to find orphaned assets</p> </li> <li> <p>Identifies asset directories without corresponding note files</p> </li> <li> <p>Option <code>--dry-run</code> to preview what would be removed without actually removing</p> </li> <li> <p>Option <code>--yes</code> / <code>-y</code> to skip confirmation prompt</p> </li> <li> <p>Automatically cleans up empty parent directories after cleanup</p> </li> <li> <p>CLI Note Movement: Added <code>mkdocs-note move</code> (alias: <code>mv</code>) command for moving/renaming notes and directories</p> </li> <li> <p>Mimics shell <code>mv</code> command behavior: if destination exists and is a directory, moves source into it</p> </li> <li> <p>Moves or renames note file or entire directory with its asset directories simultaneously</p> </li> <li> <p>Supports moving single notes or entire directories with all notes inside</p> </li> <li> <p>Supports both simple renaming and moving into existing directories</p> </li> <li> <p>Example: <code>mkdocs-note mv docs/notes/dsa/ds/trees docs/notes/dsa</code> moves to <code>docs/notes/dsa/trees</code></p> </li> <li> <p>Option <code>--keep-source-assets</code> to preserve source asset directory</p> </li> <li> <p>Option <code>--yes</code> / <code>-y</code> to skip confirmation prompt</p> </li> <li> <p>Automatically creates necessary parent directories</p> </li> <li> <p>Automatically cleans up empty parent directories in source location</p> </li> <li> <p>Includes rollback mechanism in case of errors</p> </li> <li> <p>Intelligently handles tree-based asset structure when moving directories</p> </li> <li> <p>Core Modules: Added new core modules for note management</p> </li> <li> <p><code>note_remover.py</code>: Handles note file and asset directory removal</p> </li> <li> <p><code>note_cleaner.py</code>: Manages orphaned asset cleanup and note movement operations</p> </li> <li> <p><code>notes_mover.py</code>: Handles note file and directory movement and renaming with their assets correspondingly</p> </li> <li> <p>Both modules properly handle tree-based asset structure with <code>.assets</code> suffix</p> </li> </ul>"},{"location":"about/changelog/#Changed_3","title":"Changed","text":"<ul> <li> <p>CLI User Experience: Enhanced CLI commands with better user feedback</p> </li> <li> <p>Added emoji indicators for better visual feedback (\u2705, \u274c, \u26a0\ufe0f, \ud83d\udcdd, \ud83d\udcc1, \ud83d\udd0d)</p> </li> <li> <p>Added clear confirmation prompts for destructive operations</p> </li> <li> <p>Improved error messages with helpful suggestions</p> </li> </ul>"},{"location":"about/changelog/#114---2025-10-09","title":"1.1.4 - 2025-10-09","text":""},{"location":"about/changelog/#Fixed_10","title":"Fixed","text":"<ul> <li> <p>CLI Note Creation: Fixed <code>mkdocs-note new</code> command validation logic issue (#14)</p> </li> <li> <p>Previously, the command was using <code>file_path.parent</code> as the notes directory for validation, causing incorrect asset tree structure checks</p> </li> <li> <p>This resulted in <code>validate</code> command passing but <code>new</code> command failing with \"Asset tree structure is not compliant\" errors</p> </li> <li> <p>Now both <code>create_new_note()</code> and <code>validate_note_creation()</code> methods use the configured <code>notes_dir</code> from settings for consistent validation</p> </li> <li> <p>This ensures that <code>mkdocs-note validate</code> and <code>mkdocs-note new</code> use the same validation logic</p> </li> </ul>"},{"location":"about/changelog/#113---2025-10-08","title":"1.1.3 - 2025-10-08","text":""},{"location":"about/changelog/#Added_5","title":"Added","text":"<ul> <li> <p>Timestamp Configuration: Added <code>timestamp_zone</code> configuration option (default: <code>UTC+0</code>) to ensure consistent timestamp display across different deployment environments</p> </li> <li> <p>Implemented automatic fallback to UTC timezone when invalid timezone format is provided</p> </li> <li> <p>Added comprehensive documentation for timestamp configuration options</p> </li> </ul>"},{"location":"about/changelog/#Fixed_11","title":"Fixed","text":"<ul> <li>Timestamp Display: Fixed issue where timestamp was not displayed correctly in note files - plugin now uses configured timezone for timestamp display</li> </ul>"},{"location":"about/changelog/#112---2025-10-06","title":"1.1.2 - 2025-10-06","text":""},{"location":"about/changelog/#Fixed_12","title":"Fixed","text":"<ul> <li> <p>Fixed <code>mkdocs-note init</code> command to correctly use tree-based asset directory structure</p> </li> <li> <p>Previously, the init command was creating asset directories in a flat structure (e.g., <code>assets/note-name/</code>) instead of mirroring the notes directory hierarchy</p> </li> <li> <p>Now uses <code>get_note_relative_path()</code> function consistently across all components to ensure proper tree-based structure</p> </li> <li> <p>Updated <code>_check_compliance()</code> method to correctly validate tree-based structures with <code>.assets</code> suffix on first-level subdirectories</p> </li> <li> <p>This ensures that <code>mkdocs-note init</code> and <code>mkdocs-note new</code> create consistent directory structures</p> </li> </ul>"},{"location":"about/changelog/#111---2025-10-06","title":"1.1.1 - 2025-10-06","text":""},{"location":"about/changelog/#Changed_4","title":"Changed","text":"<ul> <li> <p>[BREAKING CHANGE] Improved assets manager to use tree-based path structure instead of linear table</p> </li> <li> <p>Assets are now organized by note's relative path from notes directory, preventing conflicts between notes with same name in different subdirectories</p> </li> <li> <p>First-level subdirectories in assets tree now have <code>.assets</code> suffix for better identification (e.g., <code>assets/dsa.assets/anal/intro/</code> for note <code>dsa/anal/intro.md</code>)</p> </li> <li> <p>Updated <code>AssetsCatalogTree</code> to support hierarchical path management</p> </li> <li> <p>Updated <code>AssetsProcessor</code> to calculate asset paths based on note's relative location</p> </li> <li> <p>Updated <code>NoteCreator</code> to create asset directories using the new path structure</p> </li> <li> <p>Improved asset path conversion in plugin to use correct relative paths from note file location</p> </li> </ul>"},{"location":"about/changelog/#Fixed_13","title":"Fixed","text":"<ul> <li> <p>Fixed asset directory conflicts when notes have the same name but exist in different paths (#10)</p> </li> <li> <p>Fixed asset link replacement issues in note files - plugin now correctly converts relative image references to proper paths during MkDocs build (#10)</p> </li> <li> <p>Fixed path resolution in plugin to properly handle <code>docs_dir</code> and calculate correct relative paths for assets</p> </li> </ul>"},{"location":"about/changelog/#110---2025-10-05","title":"1.1.0 - 2025-10-05","text":""},{"location":"about/changelog/#Added_6","title":"Added","text":"<ul> <li> <p>Command Line Interface: Added comprehensive CLI commands for note management</p> </li> <li> <p><code>mkdocs note init</code>: Initialize notes directory with proper asset structure</p> </li> <li> <p><code>mkdocs note new</code>: Create new notes with template support</p> </li> <li> <p><code>mkdocs note validate</code>: Validate asset tree structure compliance</p> </li> <li> <p><code>mkdocs note template</code>: Manage note templates</p> </li> <li> <p>Asset Management System: Complete asset management infrastructure</p> </li> <li> <p>Automatic asset directory creation for each note</p> </li> <li> <p>Asset tree structure validation and compliance checking</p> </li> <li> <p>Asset path processing and linking during build</p> </li> <li> <p>Support for image references and media files</p> </li> <li> <p>Template System: Flexible note template system with variable substitution</p> </li> <li> <p>Configurable note templates with <code>{{title}}</code>, <code>{{date}}</code>, and <code>{{note_name}}</code> variables</p> </li> <li> <p>Default template with proper structure</p> </li> <li> <p>Custom template support via CLI</p> </li> <li> <p>Template validation and creation tools</p> </li> <li> <p>Note Initializer: Comprehensive note directory initialization</p> </li> <li> <p>Asset tree analysis and compliance checking</p> </li> <li> <p>Automatic structure repair for non-compliant directories</p> </li> <li> <p>Index file creation with proper markers</p> </li> <li> <p>Template file management</p> </li> <li> <p>Note Creator: Advanced note creation with validation</p> </li> <li> <p>Template-based note generation</p> </li> <li> <p>Asset directory creation</p> </li> <li> <p>Structure compliance validation</p> </li> <li> <p>Custom template support</p> </li> <li> <p>Enhanced Configuration: New configuration options</p> </li> <li> <p><code>assets_dir</code>: Directory for storing note assets</p> </li> <li> <p><code>notes_template</code>: Template file for new notes</p> </li> <li> <p><code>cache_size</code>: Performance optimization cache size</p> </li> </ul>"},{"location":"about/changelog/#Changed_5","title":"Changed","text":"<ul> <li> <p>Asset Integration: Seamless asset management integration</p> </li> <li> <p>Automatic asset path processing in markdown content</p> </li> <li> <p>Asset directory structure enforcement</p> </li> <li> <p>Improved asset linking and organization</p> </li> <li> <p>Template Processing: Enhanced template system</p> </li> <li> <p>Variable substitution with proper formatting</p> </li> <li> <p>Fallback template support</p> </li> <li> <p>Template validation and error handling</p> </li> </ul>"},{"location":"about/changelog/#Fixed_14","title":"Fixed","text":"<ul> <li> <p>Test Coverage: Comprehensive test suite improvements</p> </li> <li> <p>Fixed template content generation tests</p> </li> <li> <p>Enhanced test coverage for new components</p> </li> <li> <p>Improved test reliability and accuracy</p> </li> <li> <p>Documentation: Complete documentation updates</p> </li> <li> <p>Updated README with new features</p> </li> <li> <p>Added CLI usage examples</p> </li> <li> <p>Enhanced configuration documentation</p> </li> <li> <p>Improved troubleshooting guides</p> </li> </ul>"},{"location":"about/changelog/#103---2025-10-04","title":"1.0.3 - 2025-10-04","text":""},{"location":"about/changelog/#Added_7","title":"Added","text":"<ul> <li> <p>Added PyPI CI</p> </li> <li> <p>Added smoke test script</p> </li> <li> <p>Added release script</p> </li> </ul>"},{"location":"about/changelog/#102---2025-10-03","title":"1.0.2 - 2025-10-03","text":""},{"location":"about/changelog/#Fixed_15","title":"Fixed","text":"<ul> <li> <p>Fixed sorting inconsistency between local development and remote deployment environments</p> </li> <li> <p>Resolved issue where notes were sorted alphabetically instead of by modification time on deployed sites</p> </li> </ul>"},{"location":"about/changelog/#Added_8","title":"Added","text":"<ul> <li> <p>Added <code>use_git_timestamps</code> configuration option (default: <code>true</code>) to use Git commit timestamps for consistent sorting</p> </li> <li> <p>Implemented automatic fallback to file system timestamps when Git is not available</p> </li> <li> <p>Added comprehensive documentation for sorting behavior and deployment considerations</p> </li> </ul>"},{"location":"about/changelog/#Changed_6","title":"Changed","text":"<ul> <li> <p>Modified note processing logic to prioritize Git commit timestamps over file system timestamps</p> </li> <li> <p>Enhanced sorting reliability across different deployment platforms (Vercel, Netlify, GitHub Pages)</p> </li> <li> <p>Updated README with detailed explanation of sorting behavior and configuration options</p> </li> </ul>"},{"location":"about/changelog/#101---2025-10-03","title":"1.0.1 - 2025-10-03","text":""},{"location":"about/changelog/#Fixed_16","title":"Fixed","text":"<ul> <li>fix the configuration validation issue in #2</li> </ul>"},{"location":"about/changelog/#100---2025-10-02","title":"1.0.0 - 2025-10-02","text":""},{"location":"about/changelog/#Removed","title":"Removed","text":"<ul> <li>All of before</li> </ul>"},{"location":"about/changelog/#Changed_7","title":"Changed","text":"<ul> <li> <p>Refactored the underlying file management and note management logic.</p> </li> <li> <p>Refactored the calling logic and data flow of note management.</p> </li> <li> <p>Now only one feature which can insert recent notes at index page of notebook directory has been implemented.</p> </li> <li> <p>All things are to be restored, step by step!</p> </li> </ul>"},{"location":"about/changelog/#Fixed_17","title":"Fixed","text":"<ul> <li>Documented common configuration issues, especially YAML indentation errors that cause \"Invalid config options\" errors</li> </ul>"},{"location":"about/changelog/#Added_9","title":"Added","text":"<ul> <li> <p>Added configuration format warnings in README documentation</p> </li> <li> <p>Documented Jupyter DeprecationWarning explanation (not a plugin error)</p> </li> </ul>"},{"location":"about/changelog/#001---2025-09-05","title":"0.0.1 - 2025-09-05","text":""},{"location":"about/changelog/#Added_10","title":"Added","text":"<ul> <li> <p>The project was initialized </p> </li> <li> <p>The initial framework is based on https://github.com/stalomeow/note/blob/5fa56a9fdfa4c9b6511c5dc0c3d3620ae0aa04c3/scripts/obsidian.py</p> </li> <li> <p>However, the framework and features are too redundant to continue development and maintenance independently for me.</p> </li> </ul>"},{"location":"about/credits/","title":"Credits","text":"<p>This project is inspired by the following projects:</p> <ul> <li> <p>MkDocs</p> </li> <li> <p>Material for MkDocs</p> </li> <li> <p>MkDocs Network Graph Plugin</p> </li> </ul> <p>Thanks to all of you on which I stood to create these things!</p>"},{"location":"about/license/","title":"License","text":"<p>The plugin is licensed under the GNU General Public License v3.0 bacause of my caring about improvements sharing and open source.</p> <p>May the spirit of open source endure forever!</p>"},{"location":"contributing/architecture/","title":"Architecture Overview (v2.0.0+)","text":"<p>This document describes the complete architecture of the MkDocs-Note plugin in v2.0.0+, including modular refactoring, frontmatter metadata system, and co-located resource management.</p>"},{"location":"contributing/architecture/#1-Project-Overview","title":"1. Project Overview","text":""},{"location":"contributing/architecture/#11-Project-Positioning","title":"1.1 Project Positioning","text":"<p>MkDocs-Note is a note management plugin designed specifically for MkDocs and Material for MkDocs theme. Through modular architecture and extensible metadata system, it provides users with powerful and flexible note and document management capabilities.</p>"},{"location":"contributing/architecture/#12-Core-Design-Philosophy","title":"1.2 Core Design Philosophy","text":"<ul> <li> <p>Modular Layering: Modules are divided by functional domains with clear responsibilities and easy extensibility</p> </li> <li> <p>Co-located Resources: Resources are placed alongside note files for easy management and movement</p> </li> <li> <p>Metadata-driven: Extensible metadata system based on frontmatter</p> </li> <li> <p>Interface-friendly: Complete CLI tools and plugin API</p> </li> </ul>"},{"location":"contributing/architecture/#2-Architecture-Evolution","title":"2. Architecture Evolution","text":""},{"location":"contributing/architecture/#21-From-v1x-to-v200","title":"2.1 From v1.x to v2.0.0","text":"<ul> <li> <p>v1.x Architecture Issues:</p> <ul> <li> <p>Single <code>core/</code> directory containing all business logic</p> </li> <li> <p>Unclear module responsibilities</p> </li> <li> <p>Adding new features required modifying core code</p> </li> </ul> </li> <li> <p>v2.0.0 Architecture Improvements:</p> <ul> <li> <p>Modular Refactoring: Split <code>core/</code> by functional domains into <code>utils/</code> subpackages</p> </li> <li> <p>Clear Layering: Separation of data layer, processing layer, and operation layer</p> </li> <li> <p>Open-Closed Principle: Extend functionality through registration mechanism without modifying core</p> </li> </ul> </li> </ul>"},{"location":"contributing/architecture/#22-Refactoring-Motivation","title":"2.2 Refactoring Motivation","text":"<p>Based on Issue #15, the following goals were achieved:</p> <ol> <li> <p>\u2705 Use frontmatter to manage note metadata</p> </li> <li> <p>\u2705 Template variables are replaced only in frontmatter, keeping content clean</p> </li> <li> <p>\u2705 Improve project extensibility and maintainability</p> </li> </ol>"},{"location":"contributing/architecture/#3-Modular-Architecture","title":"3. Modular Architecture","text":""},{"location":"contributing/architecture/#31-Overall-Architecture-Diagram","title":"3.1 Overall Architecture Diagram","text":"<pre><code>mkdocs-note/\n\u251c\u2500\u2500 src/mkdocs_note/\n\u2502   \u251c\u2500\u2500 __init__.py              # Package initialization\n\u2502   \u251c\u2500\u2500 plugin.py                # MkDocs plugin entry point\n\u2502   \u251c\u2500\u2500 config.py                # Configuration management\n\u2502   \u251c\u2500\u2500 logger.py                # Logging utilities\n\u2502   \u251c\u2500\u2500 cli.py                   # Command-line interface\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 utils/                   # Utility and processor modules (new architecture)\n\u2502       \u251c\u2500\u2500 assetps/             # Asset Processors\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u2514\u2500\u2500 handlers.py      # AssetsCatalogTree, AssetsManager, AssetsProcessor\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 dataps/              # Data Processors\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 meta.py          # Data models: NoteInfo, AssetsInfo, NoteFrontmatter, AssetTreeInfo\n\u2502       \u2502   \u2514\u2500\u2500 frontmatter/     # Frontmatter management subsystem\n\u2502       \u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2502       \u2514\u2500\u2500 handlers.py  # MetadataRegistry, FrontmatterParser, FrontmatterManager\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 docsps/              # Document Processors\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 handlers.py      # NoteProcessor, CacheManager, IndexUpdater, RecentNotesUpdater\n\u2502       \u2502   \u251c\u2500\u2500 creator.py       # NoteCreator - note creation\n\u2502       \u2502   \u251c\u2500\u2500 cleaner.py       # NoteCleaner - orphaned resource cleanup\n\u2502       \u2502   \u251c\u2500\u2500 initializer.py   # NoteInitializer - structure initialization\n\u2502       \u2502   \u251c\u2500\u2500 remover.py       # NoteRemover - note deletion\n\u2502       \u2502   \u2514\u2500\u2500 mover.py         # NoteMover - note movement\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 fileps/              # File Processors\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u2514\u2500\u2500 handlers.py      # NoteScanner, AssetScanner - file scanning\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 graphps/             # Graph Processors\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 graph.py         # Network graph underlying engine, which migrated from mkdocs-network-graph-plugin\n\u2502       \u2502   \u2514\u2500\u2500 handlers.py      # GraphHandler - network graph management, configuration, static asset copying\n\u2502       \u2514\u2500\u2500 pathps/              # Path Processors\n\u2502           \u2514\u2500\u2500 __init__.py      # Path utilities (reserved)\n\u2502\n\u2514\u2500\u2500 tests/                       # Test suite\n    \u251c\u2500\u2500 core/                    # Core functionality tests\n    \u251c\u2500\u2500 smoke_test.py            # Smoke tests\n    \u251c\u2500\u2500 test_config.py           # Configuration tests\n    \u251c\u2500\u2500 test_plugin.py           # Plugin tests\n    \u2514\u2500\u2500 test.sh                  # Test runner script\n</code></pre>"},{"location":"contributing/architecture/#32-Module-Naming-Convention","title":"3.2 Module Naming Convention","text":"<p><code>ps</code> Suffix Meaning: Processors</p> <p>Module responsibility domains:</p> Module Responsibility Contents <code>assetps/</code> Asset processing Asset scanning, directory management, path conversion <code>dataps/</code> Data processing Data models, metadata management, frontmatter system <code>docsps/</code> Document operations Note processing, creation, deletion, movement, cleanup <code>fileps/</code> File I/O File scanning, validation <code>graphps/</code> Graph processing Network graph generation, link detection, visualization <code>pathps/</code> Path processing Path calculation, standardization (reserved for extension)"},{"location":"contributing/architecture/#33-Dependency-Diagram","title":"3.3 Dependency Diagram","text":"<pre><code>graph TB\n    subgraph \"External Interface Layer\"\n        Plugin[plugin.py&lt;br/&gt;MkdocsNotePlugin]\n        CLI[cli.py&lt;br/&gt;CLI Commands]\n    end\n\n    subgraph \"Configuration and Utility Layer\"\n        Config[config.py&lt;br/&gt;PluginConfig]\n        Logger[logger.py&lt;br/&gt;Logger]\n    end\n\n    subgraph \"utils/ - Modular Processor Layer\"\n        subgraph \"docsps/ - Document Operations\"\n            DocsHandlers[handlers.py&lt;br/&gt;NoteProcessor&lt;br/&gt;CacheManager&lt;br/&gt;IndexUpdater&lt;br/&gt;RecentNotesUpdater]\n            Creator[creator.py&lt;br/&gt;NoteCreator]\n            Cleaner[cleaner.py&lt;br/&gt;NoteCleaner]\n            Initializer[initializer.py&lt;br/&gt;NoteInitializer]\n            Remover[remover.py&lt;br/&gt;NoteRemover]\n            Mover[mover.py&lt;br/&gt;NoteMover]\n        end\n\n        subgraph \"assetps/ - Asset Processing\"\n            AssetsHandlers[handlers.py&lt;br/&gt;AssetsCatalogTree&lt;br/&gt;AssetsManager&lt;br/&gt;AssetsProcessor]\n        end\n\n        subgraph \"dataps/ - Data Processing\"\n            Meta[meta.py&lt;br/&gt;NoteInfo&lt;br/&gt;AssetsInfo&lt;br/&gt;NoteFrontmatter&lt;br/&gt;AssetTreeInfo]\n            FrontmatterHandlers[frontmatter/handlers.py&lt;br/&gt;MetadataRegistry&lt;br/&gt;FrontmatterParser&lt;br/&gt;FrontmatterManager]\n        end\n\n        subgraph \"graphps/ - Graph Processing\"\n            GraphHandlers[handlers.py&lt;br/&gt;GraphHandler]\n            Graph[graph.py&lt;br/&gt;Graph]\n        end\n\n        subgraph \"fileps/ - File Processing\"\n            FileHandlers[handlers.py&lt;br/&gt;NoteScanner&lt;br/&gt;AssetScanner]\n        end\n    end\n\n    Plugin --&gt; Config\n    Plugin --&gt; Logger\n    Plugin --&gt; FileHandlers\n    Plugin --&gt; DocsHandlers\n    Plugin --&gt; AssetsHandlers\n    Plugin --&gt; GraphHandlers\n\n    CLI --&gt; Config\n    CLI --&gt; Logger\n    CLI --&gt; Creator\n    CLI --&gt; Initializer\n    CLI --&gt; Remover\n    CLI --&gt; Cleaner\n    CLI --&gt; Mover\n\n    DocsHandlers --&gt; FileHandlers\n    DocsHandlers --&gt; AssetsHandlers\n    DocsHandlers --&gt; FrontmatterHandlers\n    DocsHandlers --&gt; Meta\n\n    Creator --&gt; Initializer\n    Creator --&gt; FrontmatterHandlers\n\n    Cleaner --&gt; FileHandlers\n    Mover --&gt; FileHandlers\n    Initializer --&gt; FileHandlers\n\n    GraphHandlers --&gt; Graph\n    GraphHandlers --&gt; Meta\n\n    AssetsHandlers --&gt; Meta\n    FrontmatterHandlers --&gt; Meta</code></pre>"},{"location":"contributing/architecture/#4-Core-Modules","title":"4. Core Modules","text":""},{"location":"contributing/architecture/#41-dataps---Data-Processing-Layer","title":"4.1 dataps/ - Data Processing Layer","text":""},{"location":"contributing/architecture/#411-metapy---Data-Models","title":"4.1.1 meta.py - Data Models","text":"<p>Responsibility: Define core data structures</p> <p>Core Classes:</p> <pre><code>@dataclass\nclass NoteFrontmatter:\n    \"\"\"Frontmatter metadata\"\"\"\n    date: Optional[str] = None\n    permalink: Optional[str] = None\n    publish: Optional[bool] = True\n    custom: Dict[str, Any] = field(default_factory=dict)\n\n@dataclass\nclass NoteInfo:\n    \"\"\"Complete note information\"\"\"\n    file_path: Path\n    title: str\n    relative_url: str\n    modified_date: str\n    file_size: int\n    modified_time: float\n    assets_list: List['AssetsInfo']\n    frontmatter: Optional[NoteFrontmatter] = None\n\n@dataclass\nclass AssetsInfo:\n    \"\"\"Asset file information\"\"\"\n    file_path: Path\n    file_name: str\n    relative_path: str\n    index_in_list: int\n    exists: bool = True\n\n@dataclass\nclass AssetTreeInfo:\n    \"\"\"Asset tree structure analysis information\"\"\"\n    note_name: str\n    asset_dir: Path\n    expected_structure: List[Path]\n    actual_structure: List[Path]\n    is_compliant: bool\n    missing_dirs: List[Path]\n    extra_dirs: List[Path]\n</code></pre>"},{"location":"contributing/architecture/#412-frontmatterhandlerspy---Metadata-Management-System","title":"4.1.2 frontmatter/handlers.py - Metadata Management System","text":"<p>Responsibility: Provide extensible frontmatter metadata management</p> <p>Core Components:</p> <pre><code>classDiagram\n    class MetadataField {\n        +str name\n        +Type field_type\n        +Any default\n        +bool required\n        +Callable validator\n        +str description\n        +validate(value) bool\n    }\n\n    class MetadataRegistry {\n        -Dict~str_MetadataField~ _fields\n        +register(field) void\n        +unregister(field_name) void\n        +get_field(name) MetadataField\n        +validate_data(data) Tuple~bool_List~\n    }\n\n    class FrontmatterParser {\n        -Pattern FRONTMATTER_PATTERN\n        +parse(content) Tuple~Dict_str~\n        +parse_file(path) Tuple~Dict_str~\n        +generate(frontmatter, body) str\n        +update_frontmatter(content, updates) str\n    }\n\n    class FrontmatterManager {\n        -MetadataRegistry registry\n        -FrontmatterParser parser\n        +register_field(field) void\n        +create_default_frontmatter() Dict\n        +parse_file(path) Tuple~Dict_str~\n        +create_note_content(fm, body) str\n    }\n\n    MetadataRegistry --&gt; MetadataField\n    FrontmatterParser --&gt; MetadataRegistry\n    FrontmatterManager --&gt; MetadataRegistry\n    FrontmatterManager --&gt; FrontmatterParser</code></pre> <ul> <li> <p>Design Highlights:</p> <ul> <li> <p>\u2705 Open-Closed Principle: Extend fields through registration mechanism without modifying core code</p> </li> <li> <p>\u2705 Type Safety: Field definitions include type and validation</p> </li> <li> <p>\u2705 Global Registry: Unified management of all metadata fields</p> </li> </ul> </li> </ul>"},{"location":"contributing/architecture/#42-docsps---Document-Operations-Layer","title":"4.2 docsps/ - Document Operations Layer","text":""},{"location":"contributing/architecture/#421-handlerspy---Core-Note-Processing","title":"4.2.1 handlers.py - Core Note Processing","text":"<p>Responsibility: Note processing, index updates, cache management</p> <p>Core Classes:</p> Class Responsibility Key Methods <code>NoteProcessor</code> Note metadata extraction <code>process_note()</code>, <code>_extract_frontmatter()</code>, <code>_get_git_commit_time()</code> <code>CacheManager</code> Cache and change detection <code>should_update_notes()</code>, <code>should_update_content()</code> <code>IndexUpdater</code> Index file updates <code>update_index()</code>, <code>_generate_html_list()</code> <code>RecentNotesUpdater</code> Recent notes update orchestration <code>update()</code>"},{"location":"contributing/architecture/#422-creatorpy---Note-Creator","title":"4.2.2 creator.py - Note Creator","text":"<p>Responsibility: Create new notes based on templates</p> <ul> <li> <p>Core Features:</p> <ul> <li> <p>Template loading and variable substitution</p> </li> <li> <p>Frontmatter template support</p> </li> <li> <p>Automatic asset directory creation</p> </li> <li> <p>Structure compliance validation</p> </li> </ul> </li> </ul> <p>Template Processing Flow:</p> <pre><code>sequenceDiagram\n    participant Creator as NoteCreator\n    participant FM as FrontmatterManager\n    participant FS as FileSystem\n\n    Creator-&gt;&gt;FS: Read template file\n    Creator-&gt;&gt;FM: parse_file(template_path)\n    FM--&gt;&gt;Creator: (frontmatter_dict, body)\n\n    alt Has frontmatter\n        Creator-&gt;&gt;Creator: _replace_variables_in_dict(frontmatter)\n        Creator-&gt;&gt;Creator: _replace_variables_in_text(body)\n        Creator-&gt;&gt;FM: create_note_content(processed_fm, processed_body)\n        FM--&gt;&gt;Creator: note_content\n    else No frontmatter (legacy)\n        Creator-&gt;&gt;Creator: _generate_legacy_template_content()\n    end\n\n    Creator-&gt;&gt;FS: Write note file\n    Creator-&gt;&gt;Creator: _create_asset_directory()\n    Creator-&gt;&gt;FS: Create asset directory</code></pre>"},{"location":"contributing/architecture/#423-Other-Processors","title":"4.2.3 Other Processors","text":"Module Class Responsibility <code>cleaner.py</code> <code>NoteCleaner</code> Find and clean orphaned resources <code>initializer.py</code> <code>NoteInitializer</code> Initialize directory structure, validate compliance <code>remover.py</code> <code>NoteRemover</code> Delete notes and resources <code>mover.py</code> <code>NoteMover</code> Move/rename notes and directories"},{"location":"contributing/architecture/#43-assetps---Asset-Processing-Layer","title":"4.3 assetps/ - Asset Processing Layer","text":""},{"location":"contributing/architecture/#431-handlerspy---Asset-Management","title":"4.3.1 handlers.py - Asset Management","text":"<p>Core Classes:</p> <pre><code>classDiagram\n    class AssetsCatalogTree {\n        -Path _root\n        -Path _notes_dir\n        -Dict _catalog\n        +add_node(path, assets)\n        +get_assets(path) List\n        +get_asset_dir_for_note(note) Path\n    }\n\n    class AssetsManager {\n        -PluginConfig config\n        -AssetsCatalogTree catalog_tree\n        +catalog_generator(assets, note) str\n        +catalog_updater(catalog) bool\n    }\n\n    class AssetsProcessor {\n        -Pattern image_pattern\n        +process_assets(note_info) List~AssetsInfo~\n        +update_markdown_content(content, note_file) str\n        -_process_image_reference(path, note, idx) AssetsInfo\n    }\n\n    AssetsManager --&gt; AssetsCatalogTree</code></pre> <p>Co-located Resource Pattern (v2.0.0+):</p> <pre><code>def _get_asset_directory(note_file_path: Path) -&gt; Path:\n    \"\"\"\n    Asset directory calculation rule:\n    note_file.parent / \"assets\" / note_file.stem\n\n    Example:\n        Note: docs/notes/dsa/anal/iter.md\n        Assets: docs/notes/dsa/anal/assets/iter/\n    \"\"\"\n    return note_file_path.parent / \"assets\" / note_file_path.stem\n</code></pre>"},{"location":"contributing/architecture/#44-fileps---File-Processing-Layer","title":"4.4 fileps/ - File Processing Layer","text":""},{"location":"contributing/architecture/#441-handlerspy---File-Scanning","title":"4.4.1 handlers.py - File Scanning","text":"<p>Responsibility: File scanning and validation</p> <p>Core Classes:</p> Class Method Function <code>NoteScanner</code> <code>scan_notes()</code> Recursively scan notes directory <code>NoteScanner</code> <code>_is_valid_note_file()</code> Validate file validity <code>AssetScanner</code> <code>scan_assets()</code> Scan asset files <p>Filtering Rules: - \u2705 Extension check: <code>.md</code>, <code>.ipynb</code> - \u2705 Exclusion patterns: <code>index.md</code>, <code>README.md</code> - \u2705 Exclusion directories: <code>__pycache__</code>, <code>.git</code>, <code>node_modules</code></p>"},{"location":"contributing/architecture/#45-pathps---Path-Processing-Layer","title":"4.5 pathps/ - Path Processing Layer","text":"<p>Status: Reserved for extension, currently empty</p> <ul> <li> <p>Planned Usage:</p> <ul> <li> <p>Path standardization</p> </li> <li> <p>Relative path calculation</p> </li> <li> <p>Cross-platform path processing</p> </li> </ul> </li> </ul>"},{"location":"contributing/architecture/#5-Data-Models","title":"5. Data Models","text":""},{"location":"contributing/architecture/#51-Data-Flow-Diagram","title":"5.1 Data Flow Diagram","text":"<pre><code>graph LR\n    subgraph \"Input\"\n        Files[Note Files]\n        Template[Template Files]\n        Config[Configuration]\n    end\n\n    subgraph \"Processing\"\n        Scanner[NoteScanner]\n        Processor[NoteProcessor]\n        FMParser[FrontmatterParser]\n        AssetsProc[AssetsProcessor]\n    end\n\n    subgraph \"Data Models\"\n        NoteFM[NoteFrontmatter]\n        AssetsInfo[AssetsInfo]\n        NoteInfo[NoteInfo]\n    end\n\n    subgraph \"Output\"\n        Index[Index Page]\n        ProcessedNotes[Processed Notes]\n    end\n\n    Files --&gt; Scanner\n    Scanner --&gt; Processor\n    Processor --&gt; FMParser\n    Processor --&gt; AssetsProc\n\n    FMParser --&gt; NoteFM\n    AssetsProc --&gt; AssetsInfo\n    NoteFM --&gt; NoteInfo\n    AssetsInfo --&gt; NoteInfo\n\n    NoteInfo --&gt; Index\n    NoteInfo --&gt; ProcessedNotes\n\n    Config --&gt; Scanner\n    Config --&gt; Processor\n    Template --&gt; Processor</code></pre>"},{"location":"contributing/architecture/#52-Data-Model-Relationships","title":"5.2 Data Model Relationships","text":"<pre><code>classDiagram\n    class NoteInfo {\n        +Path file_path\n        +str title\n        +str relative_url\n        +str modified_date\n        +int file_size\n        +float modified_time\n        +List~AssetsInfo~ assets_list\n        +NoteFrontmatter frontmatter\n    }\n\n    class NoteFrontmatter {\n        +str date\n        +str permalink\n        +bool publish\n        +Dict custom\n        +to_dict() Dict\n        +from_dict(data) NoteFrontmatter\n    }\n\n    class AssetsInfo {\n        +Path file_path\n        +str file_name\n        +str relative_path\n        +int index_in_list\n        +bool exists\n    }\n\n    class AssetTreeInfo {\n        +str note_name\n        +Path asset_dir\n        +List~Path~ expected_structure\n        +List~Path~ actual_structure\n        +bool is_compliant\n        +List~Path~ missing_dirs\n        +List~Path~ extra_dirs\n    }\n\n    NoteInfo \"1\" --&gt; \"0..1\" NoteFrontmatter : has\n    NoteInfo \"1\" --&gt; \"*\" AssetsInfo : contains</code></pre>"},{"location":"contributing/architecture/#6-Workflows-and-Data-Flow","title":"6. Workflows and Data Flow","text":""},{"location":"contributing/architecture/#61-Plugin-Build-time-Workflow","title":"6.1 Plugin Build-time Workflow","text":"<pre><code>sequenceDiagram\n    participant MkDocs\n    participant Plugin\n    participant Scanner as NoteScanner\n    participant Processor as NoteProcessor\n    participant FMParser as FrontmatterParser\n    participant AssetsProc as AssetsProcessor\n\n    MkDocs-&gt;&gt;Plugin: on_config(config)\n    Plugin-&gt;&gt;Plugin: Initialize AssetsProcessor\n    Plugin--&gt;&gt;MkDocs: config\n\n    MkDocs-&gt;&gt;Plugin: on_files(files)\n    activate Plugin\n\n    Plugin-&gt;&gt;Scanner: scan_notes()\n    Scanner--&gt;&gt;Plugin: note_files[]\n\n    loop For each note file\n        Plugin-&gt;&gt;Processor: process_note(file)\n        activate Processor\n\n        Processor-&gt;&gt;FMParser: parse_file(file)\n        FMParser--&gt;&gt;Processor: (frontmatter, body)\n\n        Processor-&gt;&gt;AssetsProc: process_assets(note_info)\n        AssetsProc--&gt;&gt;Processor: assets_list[]\n\n        Processor-&gt;&gt;Processor: Extract title, URL, timestamp\n        Processor--&gt;&gt;Plugin: NoteInfo\n        deactivate Processor\n    end\n\n    Plugin-&gt;&gt;Plugin: Sort by timestamp\n    Plugin-&gt;&gt;Plugin: Save recent notes list\n    Plugin--&gt;&gt;MkDocs: files\n    deactivate Plugin\n\n    loop For each page\n        MkDocs-&gt;&gt;Plugin: on_page_markdown(markdown, page)\n        activate Plugin\n\n        alt Is index page\n            Plugin-&gt;&gt;Plugin: _insert_recent_notes()\n        else Is note page\n            Plugin-&gt;&gt;AssetsProc: update_markdown_content()\n            AssetsProc--&gt;&gt;Plugin: updated_markdown\n        end\n\n        Plugin--&gt;&gt;MkDocs: markdown\n        deactivate Plugin\n    end</code></pre>"},{"location":"contributing/architecture/#62-CLI-Command-Workflows","title":"6.2 CLI Command Workflows","text":""},{"location":"contributing/architecture/#621-new-Command-Note-Creation","title":"6.2.1 new Command (Note Creation)","text":"<pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Creator\n    participant Initializer\n    participant FMManager as FrontmatterManager\n    participant FS as FileSystem\n\n    User-&gt;&gt;CLI: mkdocs-note new note.md\n    CLI-&gt;&gt;Creator: validate_note_creation(path)\n\n    Creator-&gt;&gt;Initializer: validate_asset_tree_compliance()\n    Initializer--&gt;&gt;Creator: (is_compliant, errors)\n\n    alt Not compliant\n        Creator--&gt;&gt;CLI: Validation failed\n        CLI--&gt;&gt;User: Error + suggest running init\n    end\n\n    CLI-&gt;&gt;Creator: create_new_note(path, template)\n    activate Creator\n\n    Creator-&gt;&gt;FS: Read template\n    Creator-&gt;&gt;FMManager: parse_file(template)\n    FMManager--&gt;&gt;Creator: (frontmatter, body)\n\n    Creator-&gt;&gt;Creator: _replace_variables_in_dict(frontmatter)\n    Creator-&gt;&gt;Creator: _replace_variables_in_text(body)\n\n    Creator-&gt;&gt;FMManager: create_note_content(fm, body)\n    FMManager--&gt;&gt;Creator: content\n\n    Creator-&gt;&gt;FS: Create note file\n    Creator-&gt;&gt;Creator: _create_asset_directory()\n    Creator-&gt;&gt;FS: Create asset directory\n\n    Creator--&gt;&gt;CLI: success\n    deactivate Creator\n\n    CLI--&gt;&gt;User: Success message</code></pre>"},{"location":"contributing/architecture/#622-clean-Command-Orphaned-Resource-Cleanup","title":"6.2.2 clean Command (Orphaned Resource Cleanup)","text":"<pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Cleaner\n    participant Scanner\n    participant FS\n\n    User-&gt;&gt;CLI: mkdocs-note clean\n    CLI-&gt;&gt;Cleaner: find_orphaned_assets()\n    activate Cleaner\n\n    Cleaner-&gt;&gt;Scanner: scan_notes()\n    Scanner--&gt;&gt;Cleaner: note_files[]\n\n    Cleaner-&gt;&gt;Cleaner: Build expected asset set\n    loop For each note\n        Cleaner-&gt;&gt;Cleaner: Calculate asset directory path\n        Cleaner-&gt;&gt;Cleaner: Add to expected_set\n    end\n\n    Cleaner-&gt;&gt;FS: Scan all assets/ subdirectories\n    loop For each asset directory\n        alt Not in expected set\n            Cleaner-&gt;&gt;Cleaner: Add to orphaned_list\n        end\n    end\n\n    Cleaner--&gt;&gt;CLI: orphaned_dirs[]\n    deactivate Cleaner\n\n    CLI-&gt;&gt;User: Display orphaned resources list\n\n    alt User confirms\n        CLI-&gt;&gt;Cleaner: clean_orphaned_assets(dry_run)\n        Cleaner-&gt;&gt;FS: Delete orphaned resources\n        Cleaner-&gt;&gt;Cleaner: _cleanup_empty_parent_dirs()\n        Cleaner--&gt;&gt;CLI: Deletion count\n        CLI--&gt;&gt;User: Completion message\n    end</code></pre>"},{"location":"contributing/architecture/#7-Design-Principles","title":"7. Design Principles","text":""},{"location":"contributing/architecture/#71-Modular-Design","title":"7.1 Modular Design","text":"<ul> <li> <p>Separation of Concerns:</p> <ul> <li> <p><code>dataps/</code>: Data definition and metadata management</p> </li> <li> <p><code>docsps/</code>: Document-level business logic</p> </li> <li> <p><code>assetps/</code>: Asset processing logic</p> </li> <li> <p><code>fileps/</code>: Low-level file I/O</p> </li> </ul> </li> <li> <p>Advantages:</p> <ul> <li> <p>\u2705 Single Responsibility Principle</p> </li> <li> <p>\u2705 Easy unit testing</p> </li> <li> <p>\u2705 Reduced coupling</p> </li> <li> <p>\u2705 Easy extensibility</p> </li> </ul> </li> </ul>"},{"location":"contributing/architecture/#72-Open-Closed-Principle","title":"7.2 Open-Closed Principle","text":"<ul> <li> <p>Implementation:</p> <ul> <li> <p><code>MetadataRegistry</code>: Add new fields through registration without modifying core</p> </li> <li> <p><code>FrontmatterManager</code>: Provides facade interface, hiding implementation details</p> </li> </ul> </li> </ul> <p>Extension Example: <pre><code>from mkdocs_note.utils.dataps.frontmatter.handlers import (\n    MetadataField, \n    register_field\n)\n\n# Register custom field\ncustom_field = MetadataField(\n    name=\"author\",\n    field_type=str,\n    default=None,\n    required=False,\n    description=\"Note author\"\n)\nregister_field(custom_field)\n</code></pre></p>"},{"location":"contributing/architecture/#73-Dependency-Inversion-Principle","title":"7.3 Dependency Inversion Principle","text":"<ul> <li> <p>Implementation:</p> <ul> <li> <p>High-level modules (<code>docsps/handlers.py</code>) depend on abstractions (data models)</p> </li> <li> <p>Low-level modules (<code>fileps/handlers.py</code>) implement specific functionality</p> </li> <li> <p>Decoupled through interfaces and data classes</p> </li> </ul> </li> </ul>"},{"location":"contributing/architecture/#74-Test-First","title":"7.4 Test-First","text":"<ul> <li> <p>Test Coverage:</p> <ul> <li> <p>\u2705 Unit tests: 227 tests, 100% pass rate</p> </li> <li> <p>\u2705 Smoke tests: Basic functionality verification</p> </li> <li> <p>\u2705 Integration tests: Complete workflow verification</p> </li> </ul> </li> <li> <p>Testing Principles:</p> <ul> <li> <p>Use temporary files to avoid polluting project files</p> </li> <li> <p>Mock external dependencies (Git, file system)</p> </li> <li> <p>Independent and repeatable</p> </li> </ul> </li> </ul>"},{"location":"contributing/architecture/#8-Key-Technical-Decisions","title":"8. Key Technical Decisions","text":""},{"location":"contributing/architecture/#81-Why-Choose-Modular-Refactoring","title":"8.1 Why Choose Modular Refactoring?","text":"<ul> <li> <p>Problems:</p> <ul> <li> <p>v1.x's <code>core/</code> directory contained all logic, making it difficult to maintain</p> </li> <li> <p>Adding new features required modifying multiple core files</p> </li> <li> <p>Unclear boundaries between modules</p> </li> </ul> </li> <li> <p>Solution:</p> <ul> <li> <p>Split by functional domains: assets, data, documents, files</p> </li> <li> <p>Use <code>ps</code> suffix to establish naming convention</p> </li> <li> <p>Each subpackage focuses on single responsibility</p> </li> </ul> </li> <li> <p>Benefits:</p> <ul> <li> <p>Code is easier to understand and maintain</p> </li> <li> <p>New feature development is faster</p> </li> <li> <p>Tests are easier to write</p> </li> </ul> </li> </ul>"},{"location":"contributing/architecture/#82-Why-Adopt-Co-located-Resource-Structure","title":"8.2 Why Adopt Co-located Resource Structure?","text":"<p>v1.x Problems (Centralized structure): <pre><code>docs/notes/assets/dsa.assets/anal/iter/  # Resources in centralized directory\ndocs/notes/dsa/anal/iter.md              # Note in original location\n</code></pre></p> <ul> <li> <p>Easy to miss resources when moving notes</p> </li> <li> <p>Complex path calculation</p> </li> <li> <p>Difficult to manage intuitively</p> </li> </ul> <p>v2.0.0 Solution (Co-located): <pre><code>docs/notes/dsa/anal/iter.md          # Note\ndocs/notes/dsa/anal/assets/iter/     # Resources right next to it\n</code></pre></p> <ul> <li> <p>\u2705 Notes and resources are together, easy to see at a glance</p> </li> <li> <p>\u2705 Move together when relocating</p> </li> <li> <p>\u2705 Simple path calculation</p> </li> <li> <p>\u2705 Intuitive</p> </li> </ul>"},{"location":"contributing/architecture/#83-Why-Use-Frontmatter","title":"8.3 Why Use Frontmatter?","text":"<ul> <li> <p>Advantages:</p> <ul> <li> <p>\u2705 Standard Format: YAML frontmatter is the standard in Markdown ecosystem</p> </li> <li> <p>\u2705 Extensible: Add new fields through registration mechanism</p> </li> <li> <p>\u2705 Type Safe: Field definitions include type validation</p> </li> <li> <p>\u2705 Separation of Concerns: Metadata separated from content</p> </li> </ul> </li> <li> <p>Design:</p> <ul> <li> <p>Variable substitution only occurs in frontmatter</p> </li> <li> <p>Content body remains clean, free from template syntax</p> </li> <li> <p>Supports legacy notes without frontmatter</p> </li> </ul> </li> </ul>"},{"location":"contributing/architecture/#9-Performance-Optimization","title":"9. Performance Optimization","text":""},{"location":"contributing/architecture/#91-Caching-Mechanism","title":"9.1 Caching Mechanism","text":"<pre><code>class CacheManager:\n    \"\"\"Cache Manager\n\n    Detects changes through hash values to avoid unnecessary updates\n    \"\"\"\n    def should_update_notes(self, notes: List[NoteInfo]) -&gt; bool:\n        current_hash = self._calculate_notes_hash(notes)\n        if self._last_notes_hash != current_hash:\n            self._last_notes_hash = current_hash\n            return True\n        return False\n</code></pre>"},{"location":"contributing/architecture/#92-Git-Timestamp-Caching","title":"9.2 Git Timestamp Caching","text":"<ul> <li> <p>Git commands have timeout protection (5 seconds)</p> </li> <li> <p>Automatically falls back to file system time on failure</p> </li> <li> <p>Avoids repeated Git calls</p> </li> </ul>"},{"location":"contributing/architecture/#10-Migration-Guide","title":"10. Migration Guide","text":""},{"location":"contributing/architecture/#101-Migrating-from-v1x-to-v200","title":"10.1 Migrating from v1.x to v2.0.0","text":""},{"location":"contributing/architecture/#Step-1-Migrate-Asset-Files","title":"Step 1: Migrate Asset Files","text":"<pre><code># Old structure (v1.x)\ndocs/notes/assets/dsa.assets/anal/iter/\n\n# New structure (v2.0.0)\ndocs/notes/dsa/anal/assets/iter/\n\n# Migration command example\nmv docs/notes/assets/dsa.assets/anal/iter/ docs/notes/dsa/anal/assets/\n</code></pre>"},{"location":"contributing/architecture/#Step-2-Update-Configuration-Optional","title":"Step 2: Update Configuration (Optional)","text":"<pre><code>plugins:\n  - mkdocs-note:\n      notes_dir: \"docs/notes\"  # Required\n      # assets_dir: \"...\"       # Can be removed, deprecated\n</code></pre>"},{"location":"contributing/architecture/#Step-3-Validate-Migration","title":"Step 3: Validate Migration","text":"<pre><code>mkdocs-note validate\n</code></pre>"},{"location":"contributing/architecture/#102-Code-Import-Updates","title":"10.2 Code Import Updates","text":"<p>If your code directly imports internal plugin modules:</p> <pre><code># v1.x (old)\nfrom mkdocs_note.core.note_manager import NoteProcessor\nfrom mkdocs_note.core.data_models import NoteInfo\nfrom mkdocs_note.core.frontmatter_manager import FrontmatterManager\n\n# v2.0.0 (new)\nfrom mkdocs_note.utils.docsps.handlers import NoteProcessor\nfrom mkdocs_note.utils.dataps.meta import NoteInfo\nfrom mkdocs_note.utils.dataps.frontmatter.handlers import FrontmatterManager\n</code></pre>"},{"location":"contributing/contributing/","title":"Contributing to MkDocs Note","text":"<p>First off, thank you for considering contributing to MkDocs Note! It's people like you that make the open-source community such a great place.</p>"},{"location":"contributing/contributing/#How-Can-I-Contribute","title":"How Can I Contribute?","text":"<p>There are many ways to contribute, from writing documentation and tutorials to reporting bugs and submitting code changes.</p>"},{"location":"contributing/contributing/#Reporting-Bugs","title":"Reporting Bugs","text":"<p>If you find a bug, please open an issue and provide the following information:</p> <ul> <li> <p>A clear and descriptive title.</p> </li> <li> <p>A detailed description of the problem, including steps to reproduce it.</p> </li> <li> <p>Your <code>MkDocs</code> configuration (<code>mkdocs.yml</code>).</p> </li> <li> <p>Any relevant error messages or logs.</p> </li> </ul>"},{"location":"contributing/contributing/#Suggesting-Enhancements","title":"Suggesting Enhancements","text":"<p>If you have an idea for a new feature or an improvement to an existing one, please open an issue to discuss it. This allows us to coordinate our efforts and avoid duplicating work.</p>"},{"location":"contributing/contributing/#Development-Setup","title":"Development Setup","text":"<p>To get started with local development, follow these steps:</p> <ol> <li> <p>Fork and Clone the Repository</p> <pre><code>git clone https://github.com/YOUR_USERNAME/mkdocs-note.git\ncd mkdocs-note\n</code></pre> </li> <li> <p>Set Up the Environment</p> <p>It's strongly recommended to use a virtual environment, and recommended to use uv to manage project configuration and virtual environment.</p> </li> <li> <p>Install Dependencies</p> <p>Install the project in editable mode along with the development dependencies.</p> <pre><code>uv sync --extra dev\n</code></pre> </li> <li> <p>Run Tests</p> <p>To make sure everything is set up correctly, run the test suite:</p> <pre><code>./tests/test.sh\n</code></pre> <p>Or use <code>pytest</code> directly:</p> <pre><code>uv run pytest\n</code></pre> </li> </ol>"},{"location":"contributing/contributing/#Pull-Request-Process","title":"Pull Request Process","text":"<ol> <li> <p>Ensure any new code is covered by tests.</p> </li> <li> <p>Update the documentation if you've added or changed any features.</p> </li> <li> <p>Make sure the test suite passes (<code>pytest</code>).</p> </li> <li> <p>Submit your pull request!</p> </li> </ol> <p>Thank you for your contribution!</p>"},{"location":"contributing/todo/","title":"Todo List","text":"<p>This page is used to track the todo list of the project. You can open issues on GitHub to report bugs or request features or other enhancement suggestions, it will be synced to this page if it is valuable and acceptable.</p> <p>View on GitHub for better viewing experience.</p>"},{"location":"contributing/todo/#Underlying-API","title":"Underlying API","text":""},{"location":"contributing/todo/#Features","title":"Features","text":""},{"location":"contributing/todo/#Site-Enhancement","title":"Site Enhancement","text":"<ul> <li>[ ] Try to add the feature that can manage links between each notes and combine it with mkdocs-network-graph-plugin. #20 | By virtualguard101</li> </ul>"},{"location":"contributing/todo/#CLI-Enhancement","title":"CLI Enhancement","text":"<ul> <li> <p>[ ] Add alias manager which inspired by scoop alias. #33 | By Butterblock233</p> </li> <li> <p>[ ] Add <code>list</code> subcommand to print all docs. #34 | By Butterblock233</p> </li> </ul>"},{"location":"contributing/todo/#Bug-Fixes","title":"Bug Fixes","text":""},{"location":"contributing/todo/#Documentation","title":"Documentation","text":"<ul> <li>[x] Add mkdocs-based documentation for this project #32 | By virtualguard101</li> </ul>"},{"location":"references/","title":"Index","text":"<p>Start writing your note content...</p>"},{"location":"usage/","title":"User Guide","text":"<p>This is the user guide of the <code>mkdocs-note</code> plugin in detail. You can get more details about the usage and features of the plugin here.</p> <p>For the quick start, you can refer to the Getting Started guide.</p>"},{"location":"usage/asset-manager/","title":"Asset Management","text":"<p>The plugin automatically manages assets for each note using a co-located structure:</p>"},{"location":"usage/asset-manager/#Co-Located-Asset-Organization","title":"Co-Located Asset Organization","text":"<p>Important</p> <p>Starting from version <code>2.0.0</code>, the plugin uses a co-located asset structure where assets are stored next to their notes. This makes it easier to manage and move notes with their assets together.</p> <ul> <li> <p>Local Structure: Asset directories are placed in the same directory as their corresponding note files, making them easy to find and manage</p> </li> <li> <p>Simple Pattern: For any note file, assets are stored in <code>assets/{note_stem}/</code> within the same directory</p> <ul> <li> <p>Note: <code>docs/usage/contributing.md</code> \u2192 Assets: <code>docs/usage/assets/contributing/</code></p> </li> <li> <p>Note: <code>docs/notes/python/intro.md</code> \u2192 Assets: <code>docs/notes/python/assets/intro/</code></p> </li> <li> <p>Note: <code>docs/notes/quickstart.md</code> \u2192 Assets: <code>docs/notes/assets/quickstart/</code></p> </li> </ul> </li> <li> <p>Path Mapping Examples:</p> <pre><code>docs/notes/dsa/anal/iter.md           \u2192 docs/notes/dsa/anal/assets/iter/\ndocs/notes/language/python/intro.md  \u2192 docs/notes/language/python/assets/intro/\ndocs/usage/contributing.md            \u2192 docs/usage/assets/contributing/\ndocs/notes/quickstart.md              \u2192 docs/notes/assets/quickstart/\n</code></pre> </li> </ul>"},{"location":"usage/asset-manager/#Automatic-Path-Conversion","title":"Automatic Path Conversion","text":"<ul> <li> <p>Relative References in Notes: Simply write image references as usual:</p> <pre><code>![Recursion Tree](recursion_tree.png)\n</code></pre> </li> <li> <p>Automatic Conversion: The plugin automatically converts paths during build:</p> <ul> <li> <p>For <code>docs/notes/dsa/anal/iter.md</code> \u2192 <code>assets/iter/recursion_tree.png</code></p> </li> <li> <p>For <code>docs/notes/quickstart.md</code> \u2192 <code>assets/quickstart/recursion_tree.png</code></p> </li> </ul> </li> <li> <p>No Manual Path Management: Original markdown files remain clean and simple</p> </li> </ul>"},{"location":"usage/asset-manager/#Benefits","title":"Benefits","text":"<ul> <li> <p>\u2705 Co-Located: Assets are right next to their notes, making them easy to find and manage</p> </li> <li> <p>\u2705 No Naming Conflicts: Each note has its own dedicated asset directory</p> </li> <li> <p>\u2705 Automatic Processing: Image paths are converted automatically during build</p> </li> <li> <p>\u2705 MkDocs Compatible: Generated paths work seamlessly with MkDocs</p> </li> <li> <p>\u2705 Portable: Moving a note and its assets directory together is straightforward</p> </li> </ul>"},{"location":"usage/asset-manager/#How-It-Works","title":"How It Works","text":"<ol> <li> <p>The plugin scans your configured notes directory for supported file types</p> </li> <li> <p>It extracts metadata (title, modification date) from each note file</p> </li> <li> <p>Notes are sorted by modification time (most recent first)</p> <ul> <li> <p>By default, uses Git commit timestamps for consistent sorting across deployment environments</p> </li> <li> <p>Falls back to file system timestamps if Git is not available</p> </li> </ul> </li> <li> <p>The specified number of recent notes is inserted into your index page between the marker comments</p> </li> <li> <p>For each note page, the plugin processes asset references:</p> <ul> <li> <p>Detects image references in markdown content</p> </li> <li> <p>Calculates the note's position in the directory tree</p> </li> <li> <p>Converts relative asset paths to correct references pointing to the co-located assets directory</p> </li> </ul> </li> <li> <p>The process runs automatically every time you build your documentation</p> </li> </ol>"},{"location":"usage/asset-manager/#Asset-Management-Best-Practices","title":"Asset Management Best Practices","text":"<ol> <li> <p>Directory Structure: Organize your notes in subdirectories for better categorization</p> <pre><code>docs/notes/\n\u251c\u2500\u2500 dsa/           # Data Structures &amp; Algorithms\n\u2502   \u2514\u2500\u2500 anal/\n\u2502       \u251c\u2500\u2500 iter.md\n\u2502       \u2514\u2500\u2500 assets/\n\u2502           \u2514\u2500\u2500 iter/\n\u2502               \u251c\u2500\u2500 recursion_tree.png\n\u2502               \u2514\u2500\u2500 diagram.png\n\u251c\u2500\u2500 language/      # Programming Languages\n\u2502   \u2514\u2500\u2500 python/\n\u2502       \u251c\u2500\u2500 intro.md\n\u2502       \u2514\u2500\u2500 assets/\n\u2502           \u2514\u2500\u2500 intro/\n\u2502               \u2514\u2500\u2500 syntax.png\n\u251c\u2500\u2500 ml/            # Machine Learning\n\u2514\u2500\u2500 tools/         # Development Tools\n</code></pre> </li> <li> <p>Asset Placement: Assets are automatically placed next to their note</p> <ul> <li>Note file: <code>docs/notes/dsa/anal/iter.md</code></li> <li>Assets directory: <code>docs/notes/dsa/anal/assets/iter/</code></li> </ul> </li> <li> <p>Simple References: Write simple relative references in your notes</p> <pre><code>![My Image](my-image.png)\n![Diagram](diagrams/flow.png)\n</code></pre> </li> <li> <p>Automatic Conversion: Let the plugin handle path conversion during build</p> </li> </ol>"},{"location":"usage/cli/","title":"Command Line Interface","text":"<p><code>mkdocs-note</code> provides a command line interface for documentation management. You can use the command line interface to manage your documentations and their assets correspondingly.</p>"},{"location":"usage/cli/#Overview","title":"Overview","text":"Command Description <code>mkdocs-note init</code> Initialize the notes directory structure <code>mkdocs-note new</code> Create a new note file with template content <code>mkdocs-note validate</code> Validate the asset tree structure <code>mkdocs-note template</code> Manage the template file <code>mkdocs-note remove</code>/<code>rm</code> Remove a note file and its corresponding asset directory <code>mkdocs-note clean</code> Clean orphaned assets <code>mkdocs-note move</code>/<code>mv</code> Move or rename a note file or directory <p>For overview in command line, you can use the <code>--help/-h</code> option to get the help information of all commands. <pre><code>mkdocs-note --help\n# Or\nmkdocs-note -h\n</code></pre></p> <p>For detailed information of a specific command, you can use the <code>mkdocs-note &lt;command&gt; --help</code> command to get the help information of a command. <pre><code>mkdocs-note &lt;command&gt; --help\n</code></pre></p>"},{"location":"usage/cli/#Configuration-Auto-Loading","title":"Configuration Auto-Loading","text":"<p>All CLI commands automatically load your custom configuration from <code>mkdocs.yml</code> in the current or parent directories. You can also specify a config file explicitly using <code>--config</code> or <code>-c</code> option:</p> <pre><code>mkdocs-note --config path/to/mkdocs.yml &lt;command&gt;\n</code></pre>"},{"location":"usage/cli/#Commands-Details","title":"Commands Details","text":""},{"location":"usage/cli/#Initialize-Notes-Directory","title":"Initialize Notes Directory","text":"<pre><code>mkdocs-note init [--path PATH]\n</code></pre> <ul> <li> <p>Creates the docs and assets directory structure</p> </li> <li> <p>Analyzes existing asset structures</p> </li> <li> <p>Fixes non-compliant asset trees</p> </li> </ul>"},{"location":"usage/cli/#Create-New-Note","title":"Create New Note","text":"<pre><code>mkdocs-note new FILE_PATH [--template TEMPLATE_PATH]\n</code></pre> <ul> <li> <p>Creates a new note file with template content</p> </li> <li> <p>Creates the corresponding asset directory</p> </li> <li> <p>Validates asset tree structure compliance</p> </li> </ul>"},{"location":"usage/cli/#Validate-Structure","title":"Validate Structure","text":"<pre><code>mkdocs-note validate [--path PATH]\n</code></pre> <ul> <li> <p>Checks if the asset tree structure complies with the plugin's design</p> </li> <li> <p>Reports any structural issues</p> </li> </ul>"},{"location":"usage/cli/#Template-Management","title":"Template Management","text":"<pre><code>mkdocs-note template [--check] [--create]\n</code></pre> <ul> <li> <p>Check if the configured template file exists</p> </li> <li> <p>Create the template file if it doesn't exist</p> </li> </ul>"},{"location":"usage/cli/#Remove-Note","title":"Remove Note","text":"<pre><code>mkdocs-note remove FILE_PATH [--keep-assets] [--yes]\n# or use the alias\nmkdocs-note rm FILE_PATH [--keep-assets] [--yes]\n</code></pre> <ul> <li> <p>Remove a note file and its corresponding asset directory</p> </li> <li> <p>Use <code>--keep-assets</code> to keep the asset directory</p> </li> <li> <p>Use <code>--yes</code> or <code>-y</code> to skip confirmation prompt</p> </li> </ul>"},{"location":"usage/cli/#Clean-Orphaned-Assets","title":"Clean Orphaned Assets","text":"<pre><code>mkdocs-note clean [--dry-run] [--yes]\n</code></pre> <ul> <li> <p>Find and remove asset directories without corresponding note files</p> </li> <li> <p>Use <code>--dry-run</code> to preview what would be removed without actually removing</p> </li> <li> <p>Use <code>--yes</code> or <code>-y</code> to skip confirmation prompt</p> </li> <li> <p>Automatically cleans up empty parent directories</p> </li> </ul>"},{"location":"usage/cli/#MoveRename-Note-or-Directory","title":"Move/Rename Note or Directory","text":"<pre><code>mkdocs-note move SOURCE DESTINATION [--keep-source-assets] [--yes]\n# or use the alias\nmkdocs-note mv SOURCE DESTINATION [--keep-source-assets] [--yes]\n</code></pre> <ul> <li> <p>Mimics shell <code>mv</code> behavior: </p> <ul> <li> <p>If destination doesn't exist: rename source to destination</p> </li> <li> <p>If destination exists and is a directory: move source into destination</p> </li> </ul> </li> <li> <p>Move or rename a note file or entire directory with its asset directories</p> </li> <li> <p>Supports moving single notes or entire directories with all notes inside</p> </li> <li> <p>Example: <code>mkdocs-note mv docs/notes/dsa/ds/trees docs/notes/dsa</code> moves to <code>docs/notes/dsa/trees</code></p> </li> <li> <p>Use <code>--keep-source-assets</code> to keep the source asset directory</p> </li> <li> <p>Use <code>--yes</code> or <code>-y</code> to skip confirmation prompt</p> </li> <li> <p>Automatically creates necessary parent directories</p> </li> <li> <p>Cleans up empty parent directories in source location</p> </li> </ul>"},{"location":"usage/config/","title":"Configuration Options","text":"<p><code>mkdocs-note</code> provides a flexible way to configure the plugin's behavior. You can configure the plugin's behavior by configuring the <code>mkdocs.yml</code> file.</p>"},{"location":"usage/config/#Overview","title":"Overview","text":"Option Type Default Description <code>enabled</code> bool <code>true</code> Enable or disable the plugin <code>notes_dir</code> Path <code>\"docs\"</code> Directory containing your notes <code>index_file</code> Path <code>\"docs/index.md\"</code> Index file where recent notes will be displayed <code>max_notes</code> int <code>10</code> Maximum number of recent notes to display (including index page, but display not including the index page itself) <code>start_marker</code> str <code>\"&lt;!-- recent_notes_start --&gt;\"</code> Start marker for notes insertion <code>end_marker</code> str <code>\"&lt;!-- recent_notes_end --&gt;\"</code> End marker for notes insertion <code>supported_extensions</code> Set[str] <code>{\".md\", \".ipynb\"}</code> File extensions to include as notes <code>exclude_patterns</code> Set[str] <code>{\"index.md\", \"README.md\"}</code> File name patterns to exclude from plugin management (within <code>notes_dir</code> scope). Excluded files cannot be created, scanned, listed, moved, or managed by the asset system <code>exclude_dirs</code> Set[str] <code>{\"__pycache__\", \".git\", \"node_modules\"}</code> Directory names to exclude from note scanning <code>use_git_timestamps</code> bool <code>true</code> Use Git commit timestamps for sorting instead of file system timestamps <code>timestamp_zone</code> str <code>\"UTC+0\"</code> Timezone for timestamp display (e.g., 'UTC+0', 'UTC+8', 'UTC-5'). Ensures consistent timestamp display across different deployment environments <code>assets_dir</code> Path <code>\"docs/notes/assets\"</code> Directory for storing note assets. Uses tree-based structure with <code>.assets</code> suffix on first-level subdirectories <code>enable_asset_fallback</code> bool <code>true</code> Whether to fallback to original asset paths when assets with processed uri are not found. When enabled, if a processed asset file doesn't exist, the original asset path will be preserved instead of being replaced <code>notes_template</code> Path <code>\"overrides/templates/default.md\"</code> Template file for new notes. Supports variables: <code>{{title}}</code>, <code>{{date}}</code>, <code>{{note_name}}</code> <code>cache_size</code> int <code>256</code> Size of the cache for performance optimization <code>enable_network_graph</code> bool <code>false</code> Enable or disable the network graph <code>graph_config</code> dict <code>{\"name\": \"title\", \"debug\": false}</code> Configuration for the network graph visualization. Available options: <code>name</code>: Node naming strategy (\"title\" or \"file_name\"), <code>debug</code>: Enable debug logging for graph generation"},{"location":"usage/config/#Configuration-Options-Details","title":"Configuration Options Details","text":""},{"location":"usage/config/#Basic-Configuration","title":"Basic Configuration","text":"Option Type Default Description <code>enabled</code> bool <code>true</code> Enable or disable the plugin <code>notes_dir</code> Path <code>\"docs\"</code> Directory containing your notes <code>index_file</code> Path <code>\"docs/index.md\"</code> Index file where recent notes will be displayed <code>max_notes</code> int <code>10</code> Maximum number of recent notes to display (including index page, but display not including the index page itself)"},{"location":"usage/config/#Marker-Configuration","title":"Marker Configuration","text":"Option Type Default Description <code>start_marker</code> str <code>\"&lt;!-- recent_notes_start --&gt;\"</code> Start marker for notes insertion <code>end_marker</code> str <code>\"&lt;!-- recent_notes_end --&gt;\"</code> End marker for notes insertion"},{"location":"usage/config/#File-Filter-Configuration","title":"File Filter Configuration","text":"Option Type Default Description <code>supported_extensions</code> Set[str] <code>{\".md\", \".ipynb\"}</code> File extensions to include as notes <code>exclude_patterns</code> Set[str] <code>{\"index.md\", \"README.md\"}</code> File name patterns to exclude from plugin management (within <code>notes_dir</code> scope). Excluded files cannot be created, scanned, listed, moved, or managed by the asset system <code>exclude_dirs</code> Set[str] <code>{\"__pycache__\", \".git\", \"node_modules\"}</code> Directory names to exclude from note scanning"},{"location":"usage/config/#Timestamp-Configuration","title":"Timestamp Configuration","text":"Option Type Default Description <code>use_git_timestamps</code> bool <code>true</code> Use Git commit timestamps for sorting instead of file system timestamps <code>timestamp_zone</code> str <code>\"UTC+0\"</code> Timezone for timestamp display (e.g., 'UTC+0', 'UTC+8', 'UTC-5'). Ensures consistent timestamp display across different deployment environments"},{"location":"usage/config/#Important-Notes-for-CICD-Deployment","title":"Important Notes for CI/CD Deployment","text":"<p>When using <code>use_git_timestamps: true</code> (default), ensure your CI/CD environment fetches the full Git history. Most CI/CD platforms (Vercel, GitHub Actions, GitLab CI, etc.) use shallow clones by default, which can cause inconsistent timestamps.</p> <p>For Vercel:</p> <p>Update your build script to fetch full git history:</p> <pre><code>#!/bin/bash\n\n# Unshallow the git repository to get full commit history\nif [ -d .git ]; then\n    echo \"Fetching full git history...\"\n    git fetch --unshallow || echo \"Repository is already complete\"\n    git fetch --all\nfi\n\n# Your build command\nmkdocs build\n</code></pre> <p>For GitHub Actions:</p> <p>Add <code>fetch-depth: 0</code> to your checkout step:</p> <pre><code>- name: Checkout\n  uses: actions/checkout@v5\n  with:\n    fetch-depth: 0  # Fetch full git history\n</code></pre> <p>For GitLab CI:</p> <p>Set <code>GIT_DEPTH</code> to <code>0</code> in your <code>.gitlab-ci.yml</code>:</p> <pre><code>variables:\n  GIT_DEPTH: 0  # Fetch full git history\n</code></pre> <p>If you cannot fetch full git history in your CI/CD environment, consider setting <code>use_git_timestamps: false</code> to use file system timestamps instead.</p>"},{"location":"usage/config/#Template-and-Asset-Configuration","title":"Template and Asset Configuration","text":"Option Type Default Description <code>assets_dir</code> Path <code>\"docs/notes/assets\"</code> Directory for storing note assets. Uses tree-based structure with <code>.assets</code> suffix on first-level subdirectories <code>enable_asset_fallback</code> bool <code>true</code> Whether to fallback to original asset paths when assets with processed uri are not found. When enabled, if a processed asset file doesn't exist, the original asset path will be preserved instead of being replaced <code>notes_template</code> Path <code>\"overrides/templates/default.md\"</code> Template file for new notes. Supports variables: <code>{{title}}</code>, <code>{{date}}</code>, <code>{{note_name}}</code>"},{"location":"usage/config/#Logging-Configuration","title":"Logging Configuration","text":"Option Type Default Description <code>log_level</code> str <code>\"INFO\"</code> Logging level for the plugin (DEBUG, INFO, WARNING, ERROR, CRITICAL)"},{"location":"usage/config/#Network-Graph-Configuration","title":"Network Graph Configuration","text":"Option Type Default Description <code>enable_network_graph</code> bool <code>false</code> Enable or disable the network graph <code>graph_config</code> dict <code>{\"name\": \"title\", \"debug\": false}</code> Configuration for the network graph visualization. Available options: <code>name</code>: Node naming strategy (\"title\" or \"file_name\"), <code>debug</code>: Enable debug logging for graph generation"},{"location":"usage/exclusion/","title":"Exclusion","text":"<p><code>mkdocs-note</code> provides a flexible way to exclude files or directories from the recent notes list display and other features. You can configure the <code>exclude_patterns</code> and <code>exclude_dirs</code> options in <code>mkdocs.yml</code> to exclude files or directories from the plugin's processing.</p> <p>And the exlcude patterns or directories is relative to the <code>notes_dir</code> option in <code>mkdocs.yml</code> which is the directory of the notes that defines the plugin's working scope. </p> <p>For <code>notes_dir</code>, it's default to <code>docs</code>, see more details in Working Scope and Behavior Boundaries.</p>"},{"location":"usage/exclusion/#Exclude-Patterns","title":"Exclude Patterns","text":"<p>The <code>exclude_patterns</code> option is a list of glob patterns to exclude files or directories from the recent notes list. You can configure it as follows:</p> <pre><code>plugins:\n  - mkdocs-note:\n      exclude_patterns:\n        - index.md\n        - README.md\n</code></pre> <p>By default, the <code>exclude_patterns</code> option is set to <code>{'index.md', 'README.md'}</code>, which means the index page and the README file will be excluded from the plugin's processing.</p>"},{"location":"usage/exclusion/#Exclude-Directories","title":"Exclude Directories","text":"<p>The <code>exclude_dirs</code> option is a list of directories to exclude from the recent notes list. You can configure it as follows:</p> <pre><code>plugins:\n  - mkdocs-note:\n      exclude_dirs:\n        - templates\n        - drafts\n</code></pre> <p>By default, the <code>exclude_dirs</code> option is set to <code>{'__pycache__', '.git', 'node_modules'}</code>, which means the <code>__pycache__</code>, <code>.git</code>, and <code>node_modules</code> directories will be excluded from the plugin's processing.</p>"},{"location":"usage/installation/","title":"Installation","text":""},{"location":"usage/installation/#Requirements","title":"Requirements","text":"<ul> <li> <p>Python 3.12 or higher</p> </li> <li> <p>Astral uv as recommended Python package manager</p> </li> <li> <p>MkDocs</p> </li> </ul>"},{"location":"usage/installation/#Basic-Installation","title":"Basic Installation","text":"<p>Thanks to the modern Python package manager, you can easily install the plugin using the following commands:</p> <pre><code>uv init\nuv venv\nuv add mkdocs-note\n</code></pre> <p>After installation, you can use the <code>mkdocs-note --version</code> command to check the version of the plugin.</p> <pre><code>mkdocs-note --version\n</code></pre> <p>Or you can use The <code>uv tool</code> Interface (<code>uvx</code>) to install and use it much simpler that run the plugin in an isolated environment:</p> <pre><code>uvx mkdocs-note --version\n</code></pre> <p>Or using <code>pip</code> in an old way:</p> <pre><code>pip install mkdocs-note\n</code></pre>"},{"location":"usage/installation/#For-developers","title":"For developers","text":"<p>If you want to contribute to the plugin, you can clone the repository and install the plugin in development mode:</p> <pre><code>git clone https://github.com/virtualguard101/mkdocs-note.git\ncd mkdocs-note\nuv sync --extra dev\nuv add -e .\n</code></pre> <p>Then you can run the tests for installation verification:</p> <pre><code>uv run pytest\n</code></pre>"},{"location":"usage/network-graph/","title":"Network Graph Visualization","text":"<p>The MkDocs Note plugin includes an interactive network graph feature that visualizes the relationships between your notes. This feature helps you understand the structure and connections in your documentation.</p>"},{"location":"usage/network-graph/#Overview","title":"Overview","text":"<p>The network graph feature provides:</p> <ul> <li>Interactive Visualization: Drag, zoom, and explore your note relationships using D3.js</li> <li>Automatic Link Detection: Finds connections between notes based on markdown links and wiki-style links</li> <li>Theme Integration: Seamlessly integrates with Material for MkDocs theme</li> <li>Real-time Generation: Automatically generates graph data during the build process</li> <li>Export Capabilities: Export graph data in JSON format for further analysis</li> </ul>"},{"location":"usage/network-graph/#Configuration","title":"Configuration","text":""},{"location":"usage/network-graph/#Basic-Setup","title":"Basic Setup","text":"<p>To enable the network graph, add the following to your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - mkdocs-note:\n      enable_network_graph: true\n</code></pre>"},{"location":"usage/network-graph/#Advanced-Configuration","title":"Advanced Configuration","text":"<pre><code>plugins:\n  - mkdocs-note:\n      enable_network_graph: true\n      graph_config:\n        name: \"title\"              # Node naming: \"title\" or \"file_name\"\n        debug: false              # Enable debug logging\n</code></pre>"},{"location":"usage/network-graph/#Configuration-Options","title":"Configuration Options","text":"Option Type Default Description <code>name</code> string <code>\"title\"</code> Node naming strategy: <code>\"title\"</code> uses page title, <code>\"file_name\"</code> uses filename <code>debug</code> boolean <code>false</code> Enable debug logging for graph generation"},{"location":"usage/network-graph/#Usage","title":"Usage","text":""},{"location":"usage/network-graph/#Automatic-Display","title":"Automatic Display","text":"<p>When enabled, the network graph automatically appears on your notes index page. The graph is generated during the MkDocs build process and includes:</p> <ol> <li> <p>Interactive Graph: Visual representation of note relationships</p> </li> <li> <p>Graph Data: JSON file containing nodes and edges information</p> </li> <li> <p>Static Assets: CSS and JavaScript files for rendering</p> </li> </ol>"},{"location":"usage/network-graph/#Generated-Files","title":"Generated Files","text":"<p>When you build your documentation, the plugin creates:</p> <ul> <li> <p><code>site/graph/graph.json</code> - Graph data in JSON format</p> </li> <li> <p><code>site/js/graph.js</code> - Interactive graph visualization script</p> </li> <li> <p><code>site/css/graph.css</code> - Graph styling</p> </li> </ul>"},{"location":"usage/network-graph/#Integration","title":"Integration","text":"<p>The network graph integrates with the existing recent notes feature and appears automatically when:</p> <ol> <li> <p><code>enable_network_graph: true</code> is set in configuration</p> </li> <li> <p>The plugin processes your documentation files</p> </li> <li> <p>Links between notes are detected and visualized</p> </li> </ol>"},{"location":"usage/network-graph/#Customization","title":"Customization","text":""},{"location":"usage/network-graph/#CSS-Variables","title":"CSS Variables","text":"<p>Customize the graph appearance using CSS variables in your <code>extra.css</code>:</p> <pre><code>:root {\n  /* Node colors */\n  --md-graph-node-color: #1976d2;\n  --md-graph-node-color--hover: #1565c0;\n  --md-graph-node-color--current: #ff5722;\n  --md-graph-node-color--asset: #757575;\n\n  /* Link colors */\n  --md-graph-link-color: #757575;\n  --md-graph-link-color--hover: #424242;\n\n  /* Text colors */\n  --md-graph-text-color: #212121;\n  --md-graph-text-color--light: #666666;\n}\n</code></pre>"},{"location":"usage/network-graph/#Custom-Styling","title":"Custom Styling","text":"<p>Override specific graph elements:</p> <pre><code>/* Customize node appearance */\n.graph-svg .nodes circle {\n  stroke-width: 3px;\n  filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));\n}\n\n/* Customize link appearance */\n.graph-svg .links line {\n  stroke-width: 3px;\n  stroke-dasharray: 5,5;\n}\n\n/* Customize labels */\n.graph-svg .labels text {\n  font-weight: bold;\n  text-shadow: 1px 1px 2px rgba(0,0,0,0.5);\n}\n</code></pre>"},{"location":"usage/network-graph/#Link-Generation","title":"Link Generation","text":"<p>The plugin automatically generates links between notes based on:</p>"},{"location":"usage/network-graph/#1-Markdown-Links","title":"1. Markdown Links","text":"<ul> <li> <p>Standard markdown links: <code>[link text](target.md)</code></p> </li> <li> <p>Relative path resolution from note location</p> </li> <li> <p>Automatic detection of internal documentation links</p> </li> </ul>"},{"location":"usage/network-graph/#2-Wiki-style-Links","title":"2. Wiki-style Links","text":"<ul> <li> <p>Wiki-style links: <code>[[target]]</code> or <code>[[target.md]]</code></p> </li> <li> <p>Automatic <code>.md</code> extension addition when needed</p> </li> <li> <p>Path normalization and resolution</p> </li> </ul>"},{"location":"usage/network-graph/#3-Link-Processing","title":"3. Link Processing","text":"<ul> <li> <p>Links are normalized and resolved relative to the source note</p> </li> <li> <p>Only links to other documentation pages are included</p> </li> <li> <p>External links and anchors are filtered out</p> </li> </ul>"},{"location":"usage/network-graph/#Performance-Considerations","title":"Performance Considerations","text":""},{"location":"usage/network-graph/#Large-Note-Collections","title":"Large Note Collections","text":"<p>The network graph automatically handles large collections by:</p> <ol> <li> <p>Efficient Processing: Only processes documentation pages, excluding assets and other files</p> </li> <li> <p>Link Filtering: Automatically filters out external links and invalid references</p> </li> <li> <p>Memory Optimization: Uses efficient data structures for node and edge storage</p> </li> </ol>"},{"location":"usage/network-graph/#Build-Performance","title":"Build Performance","text":"<p>The graph generation is integrated into the MkDocs build process and:</p> <ul> <li> <p>Runs during the <code>on_post_build</code> event</p> </li> <li> <p>Processes only changed files (when using <code>--dirty</code> builds)</p> </li> <li> <p>Generates graph data in parallel with other build tasks</p> </li> </ul>"},{"location":"usage/network-graph/#Integration-with-Other-Features","title":"Integration with Other Features","text":"<p>The network graph works seamlessly with other plugin features:</p> <ul> <li> <p>Recent Notes: Integrates with the existing recent notes functionality</p> </li> <li> <p>Asset Management: Respects the plugin's asset handling</p> </li> <li> <p>Template System: Works with note templates and frontmatter</p> </li> <li> <p>Build Process: Automatically generates during MkDocs build</p> </li> </ul>"},{"location":"usage/network-graph/#Technical-Details","title":"Technical Details","text":""},{"location":"usage/network-graph/#Implementation","title":"Implementation","text":"<p>The network graph feature is implemented using:</p> <ul> <li> <p>Backend: Python-based graph generation and data processing</p> </li> <li> <p>Frontend: D3.js for interactive visualization</p> </li> <li> <p>Integration: MkDocs plugin hooks for seamless integration</p> </li> <li> <p>Architecture: Modular design following the plugin's <code>graphps</code> pattern</p> </li> </ul>"},{"location":"usage/network-graph/#File-Structure","title":"File Structure","text":"<pre><code>src/mkdocs_note/\n\u251c\u2500\u2500 utils/\n\u2502   \u251c\u2500\u2500 graphps/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 graph.py          # Graph data structure and processing\n\u2502       \u2514\u2500\u2500 handlers.py       # Graph handler for plugin integration\n\u2514\u2500\u2500 static/\n    \u251c\u2500\u2500 js/graph.js       # Frontend visualization\n    \u2514\u2500\u2500 stylesheet/graph.css  # Graph styling\n</code></pre>"},{"location":"usage/network-graph/#References","title":"References","text":"<p>Credits</p> <p>Thanks to the original author of the MkDocs Network Graph Plugin for the inspiration and the underlying engine.</p>"},{"location":"usage/recent-notes/","title":"Recent Notes Insertion","text":"<p>Mkdocs Note support inserting the links which refer to the recent new or modified documentations to the marked placeholder which can be configured in <code>mkdocs.yml</code> as below.</p>"},{"location":"usage/recent-notes/#Setup-Where-to-Insert","title":"Setup Where to Insert","text":"<p>The first step is to configure where to insert the link(s) of recent new or modified documentations.</p>"},{"location":"usage/recent-notes/#Which-File-to-Insert","title":"Which File to Insert","text":"<p>You can configure the file to insert recent documentations by setting the <code>index_file</code> option in <code>mkdocs.yml</code> as follows:</p> <pre><code>plugins:\n  - mkdocs-note:\n      index_file: docs/index.md\n</code></pre> <p>By default, the file to insert the link(s) of recent new or modified documentations is <code>docs/index.md</code>.</p> <p>You can change it to your own file. k</p>"},{"location":"usage/recent-notes/#Markers","title":"Markers","text":"<p>Then setup the markers to mark the placeholder where to insert the links of recent in the file we have just configured.</p> <pre><code>plugins:\n  - mkdocs-note:\n      start_marker: &lt;!-- recent_notes_start --&gt;\n      end_marker: &lt;!-- recent_notes_end --&gt;\n</code></pre> <p>By default, the start marker is <code>&lt;!-- recent_notes_start --&gt;</code> and the end marker is <code>&lt;!-- recent_notes_end --&gt;</code>.</p> <p>In the file, you should add the markers as follows in whree you want to insert the links if you use the default markers we have just talk about above:</p> <pre><code># My Documentation\n\n&lt;!-- recent_notes_start --&gt;\n&lt;!-- recent_notes_end --&gt;\n</code></pre> <p>The marker will be replaced with the links of recent new or modified documentations after the plugin is loaded.</p>"},{"location":"usage/recent-notes/#Max-Number-of-Documentations-to-Insert","title":"Max Number of Documentations to Insert","text":"<p>You can configure the maximum number of documentations to insert by setting the <code>max_notes</code> option in <code>mkdocs.yml</code> as follows:</p> <pre><code>plugins:\n  - mkdocs-note:\n      max_notes: 10\n</code></pre> <p>In the case of default, the maximum number of documentations to insert is 10.</p>"},{"location":"usage/recent-notes/#Setup-Timestamp-Display","title":"Setup Timestamp Display","text":"<p>The recent documentation inserting feature support putting the timestamp which records your documentations' last modified or committed time.</p>"},{"location":"usage/recent-notes/#Timezone","title":"Timezone","text":"<p>In order to ensure consistent timestamp display across different deployment environments (e.g., local development vs. remote CI/CD), we introduced timezone for timestamp system.</p> <p>For specified timezone, you can set the <code>timestamp_zone</code> option in <code>mkdocs.yml</code> as follows:</p> <pre><code>plugins:\n  - mkdocs-note:\n      timestamp_zone: \"UTC+8\"\n</code></pre> <p>By default, the timezone is <code>UTC+0</code>.</p> <p>This option is particularly useful when your local environment and remote deployment server are in different timezones. Without this configuration, timestamps might appear different between <code>mkdocs serve</code> (local) and the deployed site.</p>"},{"location":"usage/recent-notes/#Format","title":"Format","text":"<p>You can configure the format of the timestamp which will be displayed by setting the <code>output_date_format</code> option in <code>mkdocs.yml</code> as follows:</p> <pre><code>plugins:\n  - mkdocs-note:\n      output_date_format: \"%Y-%m-%d %H:%M:%S\"\n</code></pre> <p>By default, the format of the timestamp is <code>%Y-%m-%d %H:%M:%S</code>.</p> <p>Some formats for reference:</p> <ul> <li> <p><code>%Y-%m-%d</code>: Year-Month-Day</p> </li> <li> <p><code>%Y-%m-%d %H:%M:%S</code>: Year-Month-Day Hour:Minute:Second</p> </li> <li> <p><code>%Y-%m-%d %H:%M</code>: Year-Month-Day Hour:Minute</p> </li> <li> <p><code>%Y-%m-%d %H</code>: Year-Month-Day Hour</p> </li> <li> <p><code>%Y-%m-%d</code>: Year-Month-Day</p> </li> <li> <p><code>%Y-%m-%d</code>: Year-Month-Day</p> </li> </ul>"},{"location":"usage/recent-notes/#Something-You-Should-Notice","title":"Something You Should Notice","text":"<p>By default, if the filename of the documentation is <code>index.md</code>, the plugin will not insert the links of recent new or modified documentations to the file.</p> <p>What's more, the files will be ingored by <code>mkdocs-note</code> because is in the <code>exclude_patterns</code> option in <code>mkdocs.yml</code> by default. If you don't want to ignore them, you can configure the <code>exclude_patterns</code> option manually without <code>index.md</code> in it:</p> <pre><code>plugins:\n  - mkdocs-note:\n      exclude_patterns:\n        # without `index.md`\n        - README.md\n</code></pre> <p>The files who are in the <code>exclude_patterns</code> option will be globally ingored by <code>mkdocs-note</code>, including assets management and other operations, see more details in Exclusion.</p>"},{"location":"usage/sec/","title":"Some Security Considerations You Should Notice","text":""},{"location":"usage/sec/#Working-Scope-and-Behavior-Boundaries","title":"Working Scope and Behavior Boundaries","text":"<p>Because of some features which can cause undefined event like data loss and structure collision and chaos, etc. especially in CLI!</p> <p>During development, we introduced some security measures to help you avoid these issues, the content below is just a overview about it. If you're a developer, you can see more details in Contributing Guide.</p> <p>However, whether the problem can be solved is not guaranteed, so you should be careful when using the plugin.</p> <p>Strongly recommended to use Git as a version control system to backup your documentations and assets before you take some dangerous actions.</p>"},{"location":"usage/sec/#Working-Scope-of-the-Plugin","title":"Working Scope of the Plugin","text":""},{"location":"usage/templating/","title":"Templating System","text":"<p>The plugin supports a flexible template system with frontmatter support for creating new notes:</p>"},{"location":"usage/templating/#Template-Variables","title":"Template Variables","text":"<ul> <li> <p><code>{{title}}</code>: The note title (derived from filename, formatted)</p> </li> <li> <p><code>{{date}}</code>: Current date and time</p> </li> <li> <p><code>{{note_name}}</code>: The original note filename</p> </li> </ul> <p>Tip</p> <p>Template variables are replaced only in the frontmatter section, keeping the note body clean and free from template syntax.</p>"},{"location":"usage/templating/#Default-Template","title":"Default Template","text":"<p>The default template contains:</p> <pre><code>---\ndate: {{date}}\ntitle: {{title}}\npermalink: \npublish: true\n---\n\n# {{title}}\n\nStart writing your note content...\n</code></pre> <p>If you use <code>mkdocs-note new</code> of the Command Line Interface in this plugin to create a new note, the template will be applied automatically.</p> <p>But notice that the template file above should be created manually by yourself in order to make the plugin automatically apply it.</p>"},{"location":"usage/templating/#Custom-Template","title":"Custom Template","text":"<p>You can create a custom template by creating a new file in the <code>templates</code> directory.</p> <p>However, please notice that your template files should contain at least the following content so that the plugin can replace some metadata variables:</p> <pre><code>---\ndate: {{date}}\ntitle: {{title}}\n---\n\n# {{title}}\n</code></pre>"},{"location":"usage/templating/#Frontmatter-Support","title":"Frontmatter Support","text":"<p>Notes support YAML frontmatter for metadata management:</p> <ul> <li> <p>Standard Fields:</p> </li> <li> <p><code>date</code>: Creation or publication date</p> </li> <li> <p><code>title</code>: The note title</p> </li> <li> <p><code>permalink</code>: Custom permalink for the note</p> </li> <li> <p><code>publish</code>: Whether the note should be published (true/false)</p> </li> <li> <p>Custom Fields: You can add custom metadata fields through the extensible registration system</p> </li> <li> <p>Metadata Registry: The plugin provides a metadata registration interface for adding new fields without modifying core code</p> </li> </ul>"}]}